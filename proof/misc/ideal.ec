(* -------------------------------------------------------------------- *)
(* Ideals                                                               *)
(* -------------------------------------------------------------------- *)

(* -------------------------------------------------------------------- *)
require import AllCore List Ring StdRing Binomial.
require (*--*) Bigalg Quotient.

clone include Ring.ComRing.

clone import Bigalg.BigComRing with
  type t <- t,
  pred CR.unit   <- Top.unit,
    op CR.zeror  <- Top.zeror,
    op CR.oner   <- Top.oner,
    op CR.( + )  <- Top.( + ),
    op CR.([-])  <- Top.([-]),
    op CR.( * )  <- Top.( * ),
    op CR.invr   <- Top.invr,
    op CR.intmul <- Top.intmul,
    op CR.ofint  <- Top.ofint,
    op CR.exp    <- Top.exp

    proof CR.*

    remove abbrev CR.(-)
    remove abbrev CR.(/).

realize CR.addrA      by apply Top.addrA    .
realize CR.addrC      by apply Top.addrC    .
realize CR.add0r      by apply Top.add0r    .
realize CR.addNr      by apply Top.addNr    .
realize CR.oner_neq0  by apply Top.oner_neq0.
realize CR.mulrA      by apply Top.mulrA    .
realize CR.mulrC      by apply Top.mulrC    .
realize CR.mul1r      by apply Top.mul1r    .
realize CR.mulrDl     by apply Top.mulrDl   .
realize CR.mulVr      by apply Top.mulVr    .
realize CR.unitP      by apply Top.unitP    .
realize CR.unitout    by apply Top.unitout  .

import BAdd.

instance ring with t
  op rzero = Top.zeror
  op rone  = Top.oner
  op add   = Top.( + )
  op opp   = Top.([-])
  op mul   = Top.( * )
  op expr  = Top.exp

  proof oner_neq0 by apply/oner_neq0
  proof addr0     by apply/addr0
  proof addrA     by apply/addrA
  proof addrC     by apply/addrC
  proof addrN     by apply/addrN
  proof mulr1     by apply/mulr1
  proof mulrA     by apply/mulrA
  proof mulrC     by apply/mulrC
  proof mulrDl    by apply/mulrDl
  proof expr0     by apply/expr0
  proof exprS     by apply/exprS.

(*Not working + should depend o the ideal used*)
(*clone import Quotient.Equiv .*)

(* -------------------------------------------------------------------- *)
(*These should be somewhere near the Prelude*)
(*curry and uncurry*)
op pairify ( f : 'a -> 'b -> 'c ) : ('a * 'b) -> 'c =
fun z => f (fst z) (snd z).
op appsnd ( f : 'b -> 'c ) ( p : 'a * 'b ) : ('a * 'c) = (fst p, f (snd p)).
(* -------------------------------------------------------------------- *)
lemma binomial (x y : t) n : 0 <= n => exp (x + y) n =
  BAdd.bigi predT (fun i => intmul (exp x i * exp y (n - i)) (bin n i)) 0 (n + 1).
proof.
elim: n => [|i ge0_i ih].
+ by rewrite BAdd.big_int1 /= !expr0 mul1r bin0 // mulr1z.
rewrite exprS // ih /= mulrDl 2!BAdd.mulr_sumr.
rewrite (BAdd.big_addn 1 _ (-1)) /= (BAdd.big_int_recr (i+1)) 1:/# /=.
pose s1 := BAdd.bigi _ _ _ _; rewrite binn // mulr1z.
rewrite !expr0 mulr1 -exprS // addrAC.
apply: eq_sym; rewrite (BAdd.big_int_recr (i+1)) 1:/# /=.
rewrite binn 1:/# mulr1z !expr0 mulr1; congr.
apply: eq_sym; rewrite (BAdd.big_int_recl _ 0) //=.
rewrite bin0 // mulr1z !expr0 mul1r -exprS // addrCA addrC; apply: eq_sym.
rewrite (BAdd.big_int_recl _ 0) //= bin0 1:/# mulr1z !expr0 mul1r addrC.
congr; apply: eq_sym; rewrite /s1 => {s1}.
rewrite !(BAdd.big_addn 1 _ (-1)) /= -BAdd.big_split /=.
rewrite !BAdd.big_seq &(BAdd.eq_bigr) => /= j /mem_range rg_j.
rewrite mulrnAr ?ge0_bin mulrA -exprS 1:/# /= addrC.
rewrite mulrnAr ?ge0_bin mulrCA -exprS 1:/#.
rewrite IntID.addrAC IntID.opprB IntID.addrA.
by rewrite -mulrDz; congr; rewrite (binSn i (j-1)) 1,2:/#.
qed.

(* -------------------------------------------------------------------- *)

(*Ideal*)
op ideal (i : t -> bool) : bool =
   (exists x : t , i x)
/\ (forall x y : t , i x => i y => i (x+y))
/\ (forall x y : t , i x => i (x * y)).

lemma idealP (i : t -> bool) :
    (exists x, i x)
 => (forall x y, i x => i y => i (x+y))
 => (forall x y, i x => i (x * y))
 => ideal i.
proof. by move=> *; do! split. qed.

lemma idealW (P : (t -> bool) -> bool) :
  (forall i,
        (exists x, i x)
     => (forall (x y : t), i x => i y => i (x+y))
     => (forall x y, i x => i (x * y))
     => P i)
  => forall i, ideal i => P i.
proof. by move=> ih i [? [??]]; apply: ih. qed.

(*The zero ideal*)
op id0 : t -> bool = pred1 zeror.

(*The whole ring ideal*)
op idT : t -> bool = predT.

(*Intersection of two ideals*)
op idealI ( i j : t -> bool ) : t -> bool =
  predI i j.

(*Sum of two ideals*)
op idealD ( i j : t -> bool ) : t -> bool =
  fun z => exists (x y : t), (z = x + y) /\ i x /\ j y.

(*Quotient of two ideals*)
op idealQ ( i j : t -> bool ) : t -> bool =
  fun x => (forall y , j y => i (x * y)).

(*Ideal generated by a subset*)
op ideal_gen ( i : t -> bool ) : t -> bool =
  fun (x : t) =>
    exists l : (t * t) list ,
         ( x = big predT (pairify ( * )) l )
      /\ ( forall z , mem l z => i z.`1).

(*Product of two ideals*)
op idealM ( i j : t -> bool ) : t -> bool =
  ideal_gen (fun z => exists (x y : t), (z = x * y) /\ i x /\ j y).

(*Radical of two ideals*)
op ideal_rad ( i : t -> bool ) : t -> bool =
  fun x => exists n : int , 0 <= n /\ i (exp x n).

(*Principal ideal*)
op principal_ideal ( i : t -> bool ) : bool =
  exists x : t , i = ideal_gen (pred1 x).

(*Finitely generated ideal*)
op fingen_ideal ( i : t -> bool ) : bool =
  exists lx : t list , i = ideal_gen (mem lx).

(*Equivalence relation associated to an ideal*)
op eqv_ideal ( i : t-> bool ) =
fun x y => i (x-y).



(**************************)
(* Lemmas                 *)
(**************************)

(*elim/idealW=> i [x ix] /(_ _ _ ix ix).*)

(*Ideals are not empty*)
lemma nonempty_ideal : forall i , ideal i => exists x , i x by elim / idealW => i [x ix] _ _; exists x.

(*Ideals are stable by addition*)
lemma mem_idealD : forall i , ideal i => forall x y  , i x => i y => i (x+y) by elim / idealW.

(*Ideals are stable by opposite*)
lemma mem_idealN : forall i , ideal i => forall x , i x => i (-x).
proof.
elim / idealW => i _ _ mulStab x ix.
rewrite - (mulr1 x) - mulrN.
by apply mulStab.
qed.

(*Ideals are stable by substraction*)
lemma mem_idealB : forall i , ideal i => forall x y , i x => i y => i (x-y).
move => i idi x y ix iy.
apply mem_idealD => //.
by apply mem_idealN.
qed.

(*Ideals are stable by right multiplication by an element of the ring*)
lemma mem_idealMr : forall i , ideal i => forall x y  , i x => i (x * y) by elim / idealW.

(*Ideals are stable by left multiplication by an element of the ring*)
lemma mem_idealMl : forall i , ideal i => forall x y  , i y => i (x * y).
move => i idi x y iy.
rewrite mulrC.
by apply mem_idealMr.
qed.

(*Ideals are stable by integer multilplication*)
lemma mem_idealMzl : forall i , ideal i => forall x n , i x => i (intmul x n).
move => i idi x n ix.
rewrite - mulr1 - mulrzAr.
by apply mem_idealMr.
qed.

(*zeror is in any ideal*)
lemma mem_ideal0 : forall i , ideal i => i zeror.
elim / idealW => i [x ix] _ mulStab.
rewrite - (mulr0 x).
by apply mulStab.
qed.

(*A sum of elements of an ideal is in the ideal*)
lemma mem_ideal_sum : forall i , ideal i => forall l , (forall x , mem l x => i x) => i (big predT idfun l).
move => i idi l il.
rewrite big_seq.
apply big_rec => /=.
+ by apply mem_ideal0.
+ move => x y ix iy.
  apply mem_idealD => //.
  by apply il.
qed.

(*A sum of x_i*y_i where x_i is in the ideal is in the ideal*)
(*Should be simplified once the proof that the radical is an ideal is simplified, using the previous lemma*)
lemma mem_ideal_comb : forall i , ideal i => forall l , ( forall (z : t * t) , mem l z => i z.`1) => i (big predT (pairify ( * )) l).
move => i idi l leftlIni.
rewrite big_seq.
apply big_rec.
+ by apply mem_ideal0.
+ move => [z1 z2] x zl ix.
  rewrite //=.
  apply mem_idealD => //.
  apply mem_idealMr => //.
  by apply (leftlIni (z1,z2)).
qed.

(*The zero ideal is an ideal*)
lemma ideal_id0 : ideal id0.
proof.
apply : idealP.
+ by exists zeror.
+ by move => x y @/id0 -> -> ; rewrite addr0.
+ by move => x y @/id0 -> ; rewrite mul0r.
qed.

(*The whole ring ideal is an ideal*)
lemma ideal_idT : ideal idT by done.

(*The intersection of two ideals is an ideal*)
lemma idealI : forall i j , ideal i => ideal j => ideal (idealI i j).
move => i j idi idj.
apply : idealP.
+ exists zeror.
  by split ; apply mem_ideal0.
+ move => x y [ix jx] [iy jy].
  by split ; apply mem_idealD.
+ move => x y [ix jx].
  by split ; apply mem_idealMr.
qed.

(*The sum of two ideals is an ideal*)
lemma idealD : forall i j , ideal i => ideal j => ideal (idealD i j).
move => i j idi idj.
apply : idealP.
+ exists zeror zeror zeror.
  split.
  - by rewrite addr0.
  - by split ; rewrite mem_ideal0.
+ move => x y [xi xj [eqx [ixi jxj]]] [yi yj [eqy [iyi jyj]]].
  rewrite eqx eqy.
  exists (xi + yi) (xj + yj).
  split.
  - by ring.
  - by split ; apply mem_idealD.
+ move => x y [xi xj [eqx [ixi jxj]]].
  rewrite eqx mulrDl.
  exists (xi * y) (xj * y).
  by split => // ; split ; apply mem_idealMr.
qed.

(*The quotient of two ideals is an ideal*)
lemma idealQ : forall i j , ideal i => ideal j => ideal (idealQ i j).
move => i j idi idj.
apply : idealP.
+ exists zeror.
  move => x jx.
  rewrite mul0r.
  by apply mem_ideal0.
+ move => x y quox quoy z jz.
  rewrite mulrDl.
  by apply mem_idealD => // ; [apply quox | apply quoy].
+ move => x y quox z jz.
  rewrite - mulrA.
  apply quox.
  rewrite mulrC.
  by apply mem_idealMr.
qed.

(*The ideal generated by a subset of a ring is an ideal*)
lemma ideal_gen : forall i , ideal (ideal_gen i).
move => i.
apply : idealP.
+ by exists zeror [].
+ move => x y [lx [xEqSumlx unzip1Inilx]] [ly [yEqSumly unzip1Inily]].
  rewrite xEqSumlx yEqSumly.
  rewrite - big_cat.
  exists (lx ++ ly).
  split => //.
  move => z zInlxCatly.
  case : (mem_cat z lx ly) => zInlxOrly _.
  apply zInlxOrly in zInlxCatly.
  case : zInlxCatly.
  - by apply unzip1Inilx.
  - by apply unzip1Inily.
+ move => x y [lx [xEqSumlx unzip1Inilx]].
  rewrite xEqSumlx mulr_suml.
  exists (map (fun v : t * t => (v.`1, (y * v.`2))) lx); split.
  * rewrite big_map &(eq_bigr) /= => -[v1 v2] _.
    by rewrite mulrAC /= /(\o) /pairify /= mulrA.
  * by case=> [v1 v2] /mapP [v /=] [# /unzip1Inilx ? ->].
qed.

(*The ideal generated by a set contains this set*)
lemma lte_ideal_gen : forall i , forall x , i x => ideal_gen i x.
move => i x ix.
exists [(x,oner)].
split => //.
rewrite big_cons big_nil /predT /pairify=> //=. (*FIXME*)
by ring.
qed.

(*The ideal generated by a set is the smallest ideal containing this set*)
lemma lte_gen_ideal : forall i j , ideal j => (forall x , i x => j x) => (forall x , ideal_gen i x => j x).
move => i j idj iIncj x [lx [eqx unzip1Inilx]].
rewrite eqx.
apply mem_ideal_comb => //.
move => z zInlx.
apply iIncj.
by apply unzip1Inilx.
qed.

(*The product of two ideals is an ideal*)
lemma idealM : forall i j , ideal i => ideal j => ideal (idealM i j).
move => i j idi idj.
rewrite /idealM. (*FIXME*)
by apply ideal_gen.
qed.

lemma exprM : forall x y n , 0 <= n => exp (x * y) n = (exp x n) * (exp y n). admitted.

(*The radical of an ideal is an ideal*)
lemma ideal_rad : forall i , ideal i => ideal (ideal_rad i).
move => i idi.
apply : idealP.
+ case : (nonempty_ideal i idi) => x ix.
  exists x 1 => /=.
  by rewrite expr1.
+ move => x y [nx [le0nx iexnx]] [ny [le0ny ieyny]].
  exists (nx+ny).
  split ; [ apply addz_ge0 | rewrite binomial] => //.
  - by apply addz_ge0.
    (*This should be simpler*)
  - have eqf: (\o) idfun (fun (i0 : int) => intmul (exp x i0 * exp y (nx + ny - i0)) (bin (nx + ny) i0)) = (fun (i0 : int) => intmul (exp x i0 * exp y (nx + ny - i0)) (bin (nx + ny) i0)).
    rewrite /(\o) //=. (*FIXME*)
    rewrite - eqf.
    rewrite - big_mapT.
    apply mem_ideal_sum => //.
    move => z zInl.
    case : (mapP (fun (i0 : int) => intmul (exp x i0 * exp y (nx + ny - i0)) (bin (nx + ny) i0)) (range 0 (nx + ny + 1)) z) => mapex _.
    apply mapex in zInl.
    case : zInl => r [_ eqz].
    rewrite eqz /=.
    apply mem_idealMzl => //.
    case : (lez_total r nx) => ineqr.
    * apply mem_idealMl => //.
      rewrite addzAC.
      by rewrite (exprD y (nx-r) ny) // ; [rewrite subz_ge0 | apply mem_idealMl].
    * apply mem_idealMr => //.
      rewrite - (addzK (-nx) r) oppzK.
      by rewrite exprD // ; [rewrite subz_ge0 | apply mem_idealMl].
+ move => x y [n [le0n iexn]].
  exists n.
  split => //.
  rewrite exprM => //.
  by apply mem_idealMr.
qed.

(*A principal ideal is an ideal*)
lemma principal_ideal : forall i , principal_ideal i => ideal i.
move => i [x eqi].
rewrite eqi.
by apply ideal_gen.
qed.

(*A finitely generated ideal is an ideal*)
lemma fingen_ideal : forall i , fingen_ideal i => ideal i.
move => i [lx eqi].
rewrite eqi.
by apply ideal_gen.
qed.

(*A principal ideal is finitely generated*)
lemma principal_fingen : forall i , principal_ideal i => fingen_ideal i.
move => i [x eqi].
exists [x].
by rewrite eqi.
qed.

(*The relation associated to an ideal is reflexive*)
lemma eqv_ideal_refl : forall i , ideal i => forall x , eqv_ideal i x x.
move => i idi x.
rewrite /eqv_ideal subrr. (*FIXME*)
by apply mem_ideal0.
qed.

(*The relation associated to an ideal is symmetric*)
lemma eqv_ideal_sym : forall i , ideal i => forall x y, eqv_ideal i x y => eqv_ideal i y x.
move => i idi x y eqxy.
rewrite /eqv_ideal - opprB. (*FIXME*)
by apply mem_idealN.
qed.

(*The relation associated to an ideal is transitive*)
lemma eqv_ideal_trans : forall i , ideal i => forall y x z, eqv_ideal i x y => eqv_ideal i y z => eqv_ideal i x z.
move => i idi y x z eqxy eqyz.
rewrite /eqv_ideal - (subr_add2r (-y)) (opprB z). (*FIXME*)
by apply mem_idealD.
qed.

op i : t -> bool.

axiom idi : ideal i.
(*Had to add this axiom to prove that the quotient is a ring*)
axiom iNT : i <> predT.

clone import Quotient.EquivQuotient with
  type T <- t,
  op eqv <- eqv_ideal i

  proof eqv_refl, eqv_sym, eqv_trans.

realize eqv_refl by apply eqv_ideal_refl ; apply idi.
realize eqv_sym by apply eqv_ideal_sym ; apply idi.
realize eqv_trans by apply eqv_ideal_trans ; apply idi.

lemma eqv_idealDr : forall z x y , eqv_ideal i x y => eqv_ideal i (x+z) (y+z).
move => z x y eqvxy.
by rewrite /eqv_ideal subr_add2r. (*FIXME*)
qed.

lemma eqv_idealDl : forall x y z , eqv_ideal i y z => eqv_ideal i (x+y) (x+z).
move => x y z eqvyz.
rewrite (addrC x) (addrC x).
by apply eqv_idealDr.
qed.

lemma eqv_idealD : forall x y z t , eqv_ideal i x z => eqv_ideal i y t => eqv_ideal i (x+y) (z+t).
move => x y z t eqvxz eqvyt.
rewrite /eqv_ideal opprD addrA - (addrA x) (addrC y) addrA - (addrA (x-z)).
apply mem_idealD => //.
by apply idi.
qed.

lemma eqv_idealN : forall x y , eqv_ideal i x y <=> eqv_ideal i (-x) (-y).
move => x y.
rewrite /eqv_ideal - opprD. (*FIXME*)
split.
+ apply mem_idealN.
  by apply idi.
+ move => iyNx.
  rewrite - (opprK (x-y)).
  apply mem_idealN => //.
  by apply idi.
qed.

lemma eqv_idealMl : forall z x y , eqv_ideal i x y => eqv_ideal i (z*x) (z*y).
move => z x y eqvxy.
rewrite /eqv_ideal - mulrN - mulrDr. (*FIXME*)
apply mem_idealMl => //.
by apply idi.
qed.

lemma eqv_idealMr : forall z x y , eqv_ideal i x y => eqv_ideal i (x*z) (y*z).
move => z x y eqvxy.
rewrite (mulrC x) (mulrC y).
by apply eqv_idealMl.
qed.

clone import ComRing with
  type t <- qT,
  op zeror <- pi zeror,
  op ( + ) <- fun x y => pi ((repr x) + (repr y)),
  op [ - ] <- fun x => pi (-(repr x)),
  op oner <- pi oner,
  op ( * ) <- fun x y => pi ((repr x) * (repr y)),
  op invr <- fun x => choiceb (fun y => (pi((repr x) * (repr y)) = pi(oner))) x,
  pred unit <- fun x => exists y , (pi((repr x) * (repr y)) = pi(oner))

  proof *.

realize addrA.
move => x y z.
apply eqv_pi.
apply (eqv_trans (repr x + repr y + repr z)).
+ rewrite - addrA.
  apply eqv_idealDl.
  apply eqv_sym.
  by apply eqvP.
+ apply eqv_idealDr.
  by apply eqvP.
qed.

realize addrC.
move => x y.
by rewrite addrC.
qed.

realize add0r.
move => x.
rewrite - reprK.
apply eqv_pi.
rewrite reprK /eqv_ideal - addrA subrr addr0 - (subr0 (repr (pi zeror))). (*FIXME*)
apply eqv_sym.
by apply eqvP.
qed.

realize addNr.
move => x.
apply eqv_pi.
rewrite /eqv_ideal subr0. (*FIXME*)
rewrite - (opprK (repr x)).
apply eqv_sym.
rewrite opprK.
by apply eqvP.
qed.

realize oner_neq0.
apply negP. (*FIXME*)
move/eqv_pi => eq10.
rewrite /eqv_ideal in eq10.
apply iNT.
apply fun_ext.
move => x.
rewrite /predT - mulr1.
rewrite mem_idealMl //.
+ by apply idi.
+ by rewrite - subr0.
qed.

realize mulrA.
move => x y z.
apply eqv_pi.
apply (eqv_trans (repr x * repr y * repr z)).
+ rewrite - mulrA.
  apply eqv_idealMl.
  apply eqv_sym.
  by apply eqvP.
+ apply eqv_idealMr.
  by apply eqvP.
qed.

realize mulrC.
move => x y.
by rewrite mulrC.
qed.

realize mul1r.
move => x.
rewrite - reprK.
apply eqv_pi.
rewrite reprK /eqv_ideal - (mul1r (- (repr x))) mulrN. (*FIXME*)
apply eqv_idealMr.
apply eqv_sym.
by apply eqvP.
qed.

realize mulrDl.
move => x y z.
apply eqv_pi.
apply (eqv_trans ((repr x + repr y) * repr z)).
+ apply eqv_idealMr.
  apply eqv_sym.
  by apply eqvP.
+ rewrite mulrDl.
  by apply eqv_idealD ; apply eqvP.
qed.

realize mulVr.
move => x ux.
rewrite mulrC.
case ux => y eqpi.
apply (choicebP (fun y => (pi((repr x) * (repr y)) = pi(oner)))).
by exists y => /=.
qed.

realize unitP.
move => x y eq.
exists y.
by rewrite mulrC.
qed.

realize unitout.
move => x nux.
apply choiceb_dfl => /=.
move => y.
apply : contra nux.
move => eqpi.
by exists y.
qed.
