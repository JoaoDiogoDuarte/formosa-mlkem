#ifndef POLY_INVNTT_HH
#define POLY_INVNTT_HH

#include "params.jahh"
#include "reduce.jahh"
#include "zetas.jahh"

inline
fn poly_invntt(stack u16[KYBER_N] rp) -> stack u16[KYBER_N]
{
  reg u64 len;  
  reg u64 start;
  reg u64 j;
  reg u64 cmp;
  reg u64 offset;
  
  reg u16 zeta;
  reg u16 t;
  reg u16 s;
  reg u16 m;

  reg ptr u16[128] zetasp;
  reg u64 zetasctr;

  zetasp = jzetas_inv;
  zetasctr = 0;

  len = 2;
  while (len <= 128)
  {
    start = 0;
    while (start < 256)
    {
      zeta = zetasp[(int)zetasctr];
      zetasctr += 1;

      j = start;
      cmp = start + len;
      while (j < cmp)
      {
        offset = j + len;
        s = rp[(int)offset];
        t = rp[(int)j];
        m = s + t;
        m = barrett_reduce(m);
        rp[(int)j] = m;
        t -= s;
        t = fqmul(t, zeta);
        rp[(int)offset] = t;
        j += 1;
      }
      start = j + len;
    }
    len <<= 1;
  }

  zeta = zetasp[127];
  j = 0;
  while (j < KYBER_N) 
  {
    t = rp[(int)j];
    t = fqmul(t, zeta);
    rp[(int)j] = t;
    j += 1;
  }
  return rp;
}

#endif
