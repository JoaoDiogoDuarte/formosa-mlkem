#ifndef POLYVEC_POINTWISE_ACC_HH
#define POLYVEC_POINTWISE_ACC_HH

#include "params.jahh"
#include "poly_basemul.jahh"
#include "poly_add.jahh"

fn polyvec_pointwise_acc(stack u16[KYBER_VECN] a, stack u16[KYBER_VECN] b, reg u64 zetasp) -> stack u16[KYBER_N]
{
  stack u16[KYBER_N] at;
  stack u16[KYBER_N] bt;
  stack u16[KYBER_N] lt;
  stack u16[KYBER_N] rt;
  reg u16 t;
  inline int i;
  reg u64 j;
  reg u64 k;

  j = 0;
  while (j < KYBER_N)
  {
    rt[(int)j] = 0;
    j += 1;
  }

  for i = 0 to KYBER_K
  {
    j = i*KYBER_N;
    k = 0;
    while (j < (i+1)*KYBER_N)
    {
      t = a[(int) j];
      at[(int) k] = t;
      t = b[(int) j];
      bt[(int) k] = t;
      j += 1;
      k += 1;
    }
    lt = poly_basemul(at, bt, zetasp);
    rt = poly_add(rt, lt);
  }

  rt = poly_reduce(rt);

  return rt;
}

#endif
