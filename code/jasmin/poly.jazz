#include "params.jahh"
#include "poly_compress.jahh"
#include "poly_decompress.jahh"
#include "poly_tobytes.jahh"
#include "poly_frombytes.jahh"
#include "poly_tomsg.jahh"
#include "poly_frommsg.jahh"
#include "poly_add.jahh"
#include "poly_sub.jahh"
#include "poly_ntt.jahh"
#include "poly_invntt.jahh"
#include "poly_basemul.jahh"
#include "poly_frommont.jahh"
#include "poly_reduce.jahh"
#include "poly_csubq.jahh"
#include "poly_getnoise.jahh"

/* These exported functions are just for unit testing */

export fn poly_compress_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_N] a;
  stack u8[128] r;

  for i = 0 to KYBER_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  r = poly_compress(a);

  for i = 0 to 128 {
    c = r[i];
    (u8)[rp + i] = c;
  }
}

export fn poly_decompress_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_N] r;
  stack u8[128] a;

  for i = 0 to 128 {
    c = (u8)[ap + i];
    a[i] = c;
  }

  r = poly_decompress(a);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_tobytes_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_N] a;

  for i = 0 to KYBER_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  poly_tobytes(rp, a);
}

export fn poly_frombytes_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_N] r;

  r = poly_frombytes(ap);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_tomsg_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_N] a;
  stack u8[32] r;

  for i = 0 to KYBER_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  r = poly_tomsg(a);

  for i = 0 to 32 {
    c = r[i];
    (u8)[rp + i] = c;
  }
}

export fn poly_frommsg_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_N] r;
  stack u8[32] a;

  for i = 0 to 32 {
    c = (u8)[ap + i];
    a[i] = c;
  }

  r = poly_frommsg(a);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}



export fn poly_add_jazz(reg u64 rp, reg u64 ap, reg u64 bp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] a;
  stack u16[KYBER_N] b;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r = poly_add(a, b);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_sub_jazz(reg u64 rp, reg u64 ap, reg u64 bp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] a;
  stack u16[KYBER_N] b;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r = poly_sub(a, b);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_ntt_jazz(reg u64 rp, reg u64 zetasp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = poly_ntt(r, zetasp);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_invntt_jazz(reg u64 rp, reg u64 zetasp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = poly_invntt(r, zetasp);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_basemul_jazz(reg u64 rp, reg u64 ap, reg u64 bp, reg u64 zetas) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] a;
  stack u16[KYBER_N] b;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r = poly_basemul(a, b, zetas);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_frommont_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = poly_frommont(r);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_getnoise_jazz(reg u64 rp, reg u64 seedp, reg u8 nonce) 
{
  reg u8 d;
  reg u16 t;
  stack u16[KYBER_N] r;
  stack u8[KYBER_SYMBYTES] seed;
  inline int i;

  for i = 0 to KYBER_SYMBYTES {
    d       = (u8)[seedp + i];
    seed[i] = d;
  }

  r = poly_getnoise(seed, nonce);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_reduce_jazz(reg u64 rp)
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = poly_reduce(r);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn poly_csubq_jazz(reg u64 rp)
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = poly_csubq(r);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}
