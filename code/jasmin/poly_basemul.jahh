#ifndef POLY_BASEMUL_HH
#define POLY_BASEMUL_HH

#include "params.jahh"
#include "reduce.jahh"

fn basemul(reg u64 rp, reg u64 ap, reg u64 bp, reg u64 offset, reg u16 zeta)
{
  reg u16 r0;
  reg u16 r1;
  reg u16 a0;
  reg u16 a1;
  reg u16 b0;
  reg u16 b1;
  reg u16 t;

  a0 = (u16)[ap+offset];
  b0 = (u16)[bp+offset];
  offset += 2;
  a1 = (u16)[ap+offset];
  b1 = (u16)[bp+offset];

  r0 = fqmul(a1, b1);
  r0 = fqmul(r0, zeta);
  t  = fqmul(a0, b0);
  r0 += t;

  r1 = fqmul(a0, b1);
  t  = fqmul(a1, b0);
  r1 += t;

  (u16)[rp+offset] = r1;
  offset -= 2;
  (u16)[rp+offset] = r0;
}

fn poly_basemul(reg u64 rp, reg u64 ap, reg u64 bp, reg u64 zetas)
{
  reg u64 i;
  reg u64 offset;
  reg u16 zeta;
  i = 0; 

  zetas += 128;

  while (i < 64)
  {
    offset  =  8*i;
    zeta = (u16)[zetas + 2*i];
    basemul(rp, ap, bp, offset, zeta);
    zeta = -zeta;
    offset += 4;
    basemul(rp, ap, bp, offset, zeta);
    i += 1;
  }
}

#endif
