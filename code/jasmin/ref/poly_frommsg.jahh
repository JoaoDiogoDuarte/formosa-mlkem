#ifndef POLY_FROMMSG_HH
#define POLY_FROMMSG_HH

#include "params.jahh"

fn poly_frommsg(reg ptr u16[KYBER_N] rp, reg u64 ap) -> stack u16[KYBER_N]
{
  reg u8 c;
  reg u16 t;
  inline int i;
  inline int j;

  for i = 0 to 32
  {
    c = (u8)[ap + i];

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+1] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+2] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+3] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+4] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+5] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+6] = t;
    c >>= 1;

    t = (16u)c; 
    t &= 1;
    t *= (KYBER_Q+1)/2;
    rp[8*i+7] = t;
    c >>= 1;
  }
  return rp;
}

#endif
