require "params.jahh"
require "poly_compress.jahh"
require "poly_decompress.jahh"
require "poly_tobytes.jahh"
require "poly_frombytes.jahh"
require "poly_tomsg.jahh"
require "poly_frommsg.jahh"
require "poly_add2.jahh"
require "poly_sub.jahh"
require "poly_ntt.jahh"
require "poly_invntt.jahh"
require "poly_basemul.jahh"
require "poly_frommont.jahh"
require "poly_reduce.jahh"
require "poly_csubq.jahh"
require "poly_getnoise.jahh"
require "polyvec_tobytes.jahh"
require "polyvec_frombytes.jahh"
require "polyvec_compress.jahh"
require "polyvec_decompress.jahh"
require "polyvec_add2.jahh"
require "polyvec_pointwise_acc.jahh"
require "polyvec_ntt.jahh"
require "polyvec_invntt.jahh"
require "polyvec_csubq.jahh"
require "polyvec_reduce.jahh"
require "polyvec_frompolys.jahh"
require "polyvec_topolys.jahh"
require "gen_matrix.jahh"


export fn indcpa_keypair_jazz(reg u64 pkp, reg u64 skp, reg u64 randomnessp)
{
  stack u16[KYBER_VECN] a0 a1 a2 e pkpv skpv;
  stack u16[KYBER_N] poly0 poly1 poly2;
  stack u8[64] buf;
  stack u8[KYBER_SYMBYTES] publicseed noiseseed;
  stack u8[32] inbuf;
  reg u8 c;
  reg u64 zero;
  reg u8 nonce;
  reg u64 i, j;

  stack u64 spkp;
  stack u64 sskp;

  spkp = pkp;
  sskp = skp;

  i = 0;
  while (i < KYBER_SYMBYTES)
  {
    c = (u8)[randomnessp + i];
    inbuf[(int) i] = c;
    i += 1;
  }

  buf = sha3512_32(buf, inbuf);

  i = 0;
  j = KYBER_SYMBYTES;
  while (i < KYBER_SYMBYTES)
  {
    c = buf[(int)i];
    publicseed[(int)i] = c;
    c = buf[(int)j];
    noiseseed[(int)i] = c;
    i += 1;
    j += 1;
  }

  zero = 0; 
  a0, a1, a2 = gen_matrix(publicseed, zero);

  nonce = 0;
  poly0 = poly_getnoise(poly0, noiseseed, nonce);
  nonce = 1;
  poly1 = poly_getnoise(poly1, noiseseed, nonce);
  nonce = 2;
  poly2 = poly_getnoise(poly2, noiseseed, nonce);
  skpv = polyvec_frompolys(poly0, poly1, poly2);

  nonce = 3;
  poly0 = poly_getnoise(poly0, noiseseed, nonce);
  nonce = 4;
  poly1 = poly_getnoise(poly1, noiseseed, nonce);
  nonce = 5;
  poly2 = poly_getnoise(poly2, noiseseed, nonce);
  e = polyvec_frompolys(poly0, poly1, poly2);

  skpv = polyvec_ntt(skpv);
  e    = polyvec_ntt(e);

  poly0 = polyvec_pointwise_acc(a0, skpv);
  poly0 = poly_frommont(poly0);
  poly1 = polyvec_pointwise_acc(a1, skpv);
  poly1 = poly_frommont(poly1);
  poly2 = polyvec_pointwise_acc(a2, skpv);
  poly2 = poly_frommont(poly2);
  pkpv = polyvec_frompolys(poly0, poly1, poly2);

  pkpv = polyvec_add2(pkpv, e);
  pkpv = polyvec_reduce(pkpv);

  pkp = spkp;
  skp = sskp;

  polyvec_tobytes(skp, skpv);
  polyvec_tobytes(pkp, pkpv);

  i = 0;
  pkp += KYBER_POLYVECBYTES; 
  while (i < KYBER_SYMBYTES)
  {
    c = publicseed[(int)i];
    (u8)[pkp] = c;
    pkp += 1;
    i += 1;
  }
}


export fn indcpa_enc_jazz(reg u64 ctp, reg u64 msgp, reg u64 pkp, reg u64 coinsp)
{
  stack u16[KYBER_VECN] pkpv at0 at1 at2 sp ep bp;
  stack u16[KYBER_N] k poly epp v poly0 poly1 poly2;
  stack u8[KYBER_SYMBYTES] publicseed;
  stack u8[KYBER_SYMBYTES] noiseseed;
  reg u64 i j one;
  reg u16 t;
  reg u8 c nonce;
  stack u64 sctp;

  sctp = ctp;

  i = 0;
  while (i < KYBER_SYMBYTES)
  {
    c = (u8)[coinsp+i];
    noiseseed[(int)i] = c;
    i += 1;
  }

  pkpv = polyvec_frombytes(pkp);

  i = 0;
  pkp += KYBER_POLYVECBYTES;
  while (i < KYBER_SYMBYTES)
  {
    c = (u8)[pkp];
    publicseed[(int)i] = c;
    pkp += 1;
    i += 1;
  }

  k = poly_frommsg(k, msgp);

  one = 1;
  at0, at1, at2 = gen_matrix(publicseed, one);


  nonce = 0;
  poly0 = poly_getnoise(poly0, noiseseed, nonce);
  nonce = 1;
  poly1 = poly_getnoise(poly1, noiseseed, nonce);
  nonce = 2;
  poly2 = poly_getnoise(poly2, noiseseed, nonce);
  sp = polyvec_frompolys(poly0, poly1, poly2);

  nonce = 3;
  poly0 = poly_getnoise(poly0, noiseseed, nonce);
  nonce = 4;
  poly1 = poly_getnoise(poly1, noiseseed, nonce);
  nonce = 5;
  poly2 = poly_getnoise(poly2, noiseseed, nonce);
  ep = polyvec_frompolys(poly0, poly1, poly2);

  nonce = 6;
  epp = poly_getnoise(epp, noiseseed, nonce);

  sp = polyvec_ntt(sp);
    
    
  poly0 = polyvec_pointwise_acc(at0, sp);
  poly1 = polyvec_pointwise_acc(at1, sp);
  poly2 = polyvec_pointwise_acc(at2, sp);
  bp = polyvec_frompolys(poly0, poly1, poly2);
  
  v = polyvec_pointwise_acc(pkpv, sp);

  bp = polyvec_invntt(bp);
  v = poly_invntt(v);

  bp = polyvec_add2(bp, ep);
  v = poly_add2(v, epp);
  v = poly_add2(v, k);
  bp = polyvec_reduce(bp);
  v  = poly_reduce(v);

  ctp = sctp;
  polyvec_compress(ctp, bp);
  ctp += KYBER_POLYVECCOMPRESSEDBYTES;
  v = poly_compress(ctp, v);
}



export fn indcpa_dec_jazz(reg u64 msgp, reg u64 ctp, reg u64 skp)
{
  stack u16[KYBER_N] t v mp;
  stack u16[KYBER_VECN] bp skpv;

  bp = polyvec_decompress(ctp);
  ctp += KYBER_POLYVECCOMPRESSEDBYTES;
  v = poly_decompress(v, ctp);

  skpv = polyvec_frombytes(skp);
  
  bp = polyvec_ntt(bp);
  t = polyvec_pointwise_acc(skpv, bp);
  t = poly_invntt(t );

  mp = poly_sub(mp, v, t);
  mp = poly_reduce(mp);
  
  mp = poly_tomsg(msgp, mp);
}
