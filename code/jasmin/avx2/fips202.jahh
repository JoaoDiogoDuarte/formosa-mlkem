#ifndef FIPS202_HH
#define FIPS202_HH

#include "keccakf1600.jahh"
#include "fips202_common.jahh"

inline
fn st0(reg ptr u64[25] state) -> reg ptr u64[25]
{
  inline int i;

  for i = 0 to 25 {
    state[i] = 0;
  }

  return state;
}


inline
fn add_full_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u64 r8
) -> stack u64[25], reg u64, reg u64
{
  reg u64 i t r64;

  r64 = r8;
  r64 >>= 3;
  i = 0;
  while (i < r64)
  {
    t = [in + 8 * i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  in += r8;
  inlen -= r8;

  return state, in, inlen;
}


inline
fn add_final_block(
  stack u64[25] state,
  reg u64 in,
  reg u64 inlen,
  reg u8 trail_byte,
  reg u64 r8
) -> stack u64[25]
{
  reg u64 i, t, inlen8;
  reg u8 c;

  inlen8 = inlen;
  inlen8 >>= 3;
  i = 0;
  while ( i < inlen8)
  {
    t = [in + 8*i];
    state[(int) i] ^= t;
    i = i + 1;
  }

  i <<= 3;
  while (i < inlen)
  {
    c = (u8)[in + i];
    state[u8 (int) i] ^= c;
    i = i + 1;
  }

  state[u8 (int) i] ^= trail_byte;

  i = r8;
  i -= 1;
  state[u8 (int) i] ^= 0x80;

  return state;
}


inline
fn xtr_full_block(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen,
  reg u64 rate
) -> reg u64, reg u64
{
  reg u64 i t rate64;

  rate64 = rate;
  rate64 >>= 3;
  i = 0;
  while (i < rate64)
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }

  out += rate;
  outlen -= rate;

  return out, outlen;
}


inline
fn xtr_bytes(
  stack u64[25] state,
  reg u64 out,
  reg u64 outlen
)
{
  reg u64 i t outlen8;
  reg u8 c;

  outlen8 = outlen;
  outlen8 >>= 3;
  i = 0;
  while (i < outlen8 )
  {
    t = state[(int) i];
    [out + 8 * i] = t;
    i = i + 1;
  }
  i <<= 3;

  while (i < outlen)
  {
    c = state[u8 (int) i];
    (u8)[out + i] = c;
    i = i + 1;
  }
}


inline
fn __keccak1600_scalar(
  stack u64 s_out s_outlen,
  reg   u64 in inlen,
  stack u64 s_trail_byte,
  reg   u64 rate
)
{
  stack u64[25] state;
  stack u64 s_in, s_inlen, s_rate;
  reg u64 out, outlen, t;
  reg u8 trail_byte;

  state = st0(state);

  while ( inlen >= rate )
  {
    state, in, inlen = add_full_block(state, in, inlen, rate);

    s_in = in;
    s_inlen = inlen;
    s_rate = rate;

    state = __keccakf1600_scalar(state);

    inlen = s_inlen;
    in = s_in;
    rate = s_rate;
  }

  t = s_trail_byte;
  trail_byte = (8u) t;
  state = add_final_block(state, in, inlen, trail_byte, rate);

  outlen = s_outlen;

  while ( outlen > rate )
  {
    s_outlen = outlen;
    s_rate = rate;

    state = __keccakf1600_scalar(state);

    out = s_out;
    outlen = s_outlen;
    rate = s_rate;

    out, outlen = xtr_full_block(state, out, outlen, rate);
    s_outlen = outlen;
    s_out = out;
  }

  state = __keccakf1600_scalar(state);
  out = s_out;
  outlen = s_outlen;

  xtr_bytes(state, out, outlen);
}


inline
fn keccak1600_scalar(reg u64 out outlen in inlen, stack u64[2] config)
{
  stack u64 s_trail_byte;
  stack u64 s_out s_outlen;
  reg   u64   trail_byte;
  reg   u64   rate;

  s_out = out;
  s_outlen = outlen;

  trail_byte = config[0];
  s_trail_byte = trail_byte;

  rate = config[1];

  __keccak1600_scalar(s_out, s_outlen, in, inlen, s_trail_byte, rate);
}

fn shake256(reg u64 out outlen in inlen)
{
  reg u64 ds;
  reg u64 rate;
  stack u64[2] config;
  ds = 0x1f;
  rate = SHAKE256_RATE;
  config[0] = ds;
  config[1] = rate;
  keccak1600_scalar(out, outlen, in, inlen, config);
}

fn shake256_128_33(reg ptr u8[128] out, reg const ptr u8[33] in) -> stack u8[128]
{
  stack u64[25] state;
  reg u64 t64;
  reg u8 c;
  inline int i;

  stack ptr u8[128] sout;

  sout = out;

  state = st0(state);

  for i = 0 to 4 {
    t64 = in[u64 i];
    state[u64 i] ^= t64;
  }

  c = in[32];
  state[u8 32] ^= c;
  state[u8 33] ^= 0x1f;
  state[u8 SHAKE256_RATE-1] ^= 0x80;

  state = __keccakf1600_scalar(state);

  out = sout; 

  for i = 0 to 16 {
    t64 = state[u64 i];
    out[u64 i] = t64;
  }

  return out;
}

fn sha3512_32(reg ptr u8[64] out, reg const ptr u8[32] in) -> stack u8[64]
{
  stack u64[25] state;
  stack ptr u8[64] out_s;
  reg u64 t64;
  inline int i;

  state = st0(state);

  for i = 0 to 4
  {
    t64 = in[u64 i];
    state[u64 i] ^= t64;
  }

  state[u8 32] ^= 0x06;
  state[u8 SHA3512_RATE-1] ^= 0x80;

  out_s = out;
  
  state = __keccakf1600_scalar(state);

  out = out_s;
  
  for i = 0 to 8 {
    t64 = state[i];
    out[u64 i] = t64;
  }

  return out;
}


fn shake128_absorb34(reg ptr u64[25] state, reg const ptr u8[34] in) -> reg ptr u64[25]
{
  reg u64 t64;
  reg u16 t16;
  inline int i;

  state = st0(state);

  for i = 0 to 4
  {
    t64 = in[u64 i];
    state[u64 i] ^= t64;
  }

  t16 = in.[u16 32];
  state[u16 16] ^= t16;

  state[u8 34] ^= 0x1f;

  state[u8 SHAKE128_RATE-1] ^= 0x80;

  return state;
}

inline
fn shake128_squeezeblock(reg ptr u64[25] state, reg ptr u8[SHAKE128_RATE] out) -> reg ptr u64[25], reg ptr u8[SHAKE128_RATE]
{
  stack ptr u8[SHAKE128_RATE] out_s;
  reg u64 t;
  inline int i;

  out_s = out;
  state = __keccakf1600_scalar(state);
  out = out_s;

  for i = 0 to SHAKE128_RATE/8
  {
    t = state[i];
    out[u64 i] = t;
  }
  return state, out;
}


#endif
