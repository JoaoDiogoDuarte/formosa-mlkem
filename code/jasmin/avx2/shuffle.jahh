#ifndef SHUFFLE_HH
#define SHUFFLE_HH


inline 
fn shuffle8(reg u256 a b) -> reg u256, reg u256
{
  reg u256 r0 r1; 
  r0 = #VPERM2I128(a,b,0x20);
  r1 = #VPERM2I128(a,b,0x31);
  return r0, r1;
}

inline 
fn shuffle4(reg u256 a b) -> reg u256, reg u256
{
  reg u256 r0 r1; 
  r0 = #VPUNPCKL_4u64(a,b);
  r1 = #VPUNPCKH_4u64(a,b);
  return r0, r1;
}

inline 
fn shuffle2(reg u256 a b) -> reg u256, reg u256
{
  reg u256 r0 r1 t0 t1; 
  t0 = #VPSLL_4u64(b,32);
  t1 = #VPSRL_4u64(a,32);
  r0 = #VPBLEND_8u32(a,t0,0xAA);
  r1 = #VPBLEND_8u32(t1,b,0xAA);
  return r0, r1;
}

inline 
fn shuffle1(reg u256 a b) -> reg u256, reg u256
{
  reg u256 r0 r1 t0 t1; 
  t0 = #VPSLL_8u32(b,16);
  t1 = #VPSRL_8u32(a,16);
  r0 = #VPBLEND_16u16(a,t0,0xAA);
  r1 = #VPBLEND_16u16(t1,b,0xAA);
  return r0, r1;
}

inline 
fn nttpack128(reg u256 r0 r1 r2 r3 r4 r5 r6 r7)
    -> reg u256, reg u256, reg u256, reg u256, reg u256, reg u256, reg u256, reg u256
{
  r0, r1 = shuffle1(r0, r1);
  r2, r3 = shuffle1(r2, r3);
  r4, r5 = shuffle1(r4, r5);
  r6, r7 = shuffle1(r6, r7);

  r0, r2 = shuffle2(r0, r2);
  r4, r6 = shuffle2(r4, r6);
  r1, r3 = shuffle2(r1, r3);
  r5, r7 = shuffle2(r5, r7);

  r0, r4 = shuffle4(r0, r4);
  r1, r5 = shuffle4(r1, r5);
  r2, r6 = shuffle4(r2, r6);
  r3, r7 = shuffle4(r3, r7);

  r0, r1 = shuffle8(r0, r1);
  r2, r3 = shuffle8(r2, r3);
  r4, r5 = shuffle8(r4, r5);
  r6, r7 = shuffle8(r6, r7);

  return r0, r2, r4, r6, r1, r3, r5, r7;
}


#endif
