#ifndef GEN_MATRIX_HH
#define GEN_MATRIX_HH

#include "fips202.jahh"
#include "params.jahh"
#include "shuffle.jahh"

param int _19KYBER_Q = 63251;

inline
fn rej_uniform(stack u16[KYBER_N] rp, reg u64 offset, stack u8[SHAKE128_RATE] buf) ->  reg u64, stack u16[KYBER_N]
{
  reg u16 val;
  reg u16 t;
  reg u64 pos ctr;
  reg u64 cnd0 cnd1 exit;


  ctr = offset;
  pos = 0;
  exit = 0;

  while(exit == 0)
  {
    val = (16u)buf[(int)pos];
    pos += 1;
    t   = (16u)buf[(int)pos];
    t <<= 8;
    val |= t;
    pos += 1;

    if(val < _19KYBER_Q)
    {
      t = val;
      t >>= 12;
      t *= KYBER_Q;
      val -= t;
      rp[(int)ctr] = val;
      ctr += 1;
    }

    // Check if we should exit the loop
    cnd0  = KYBER_N;
    cnd0 -= ctr;
    cnd0 -= 1;
    cnd1  = SHAKE128_RATE;
    cnd1 -= pos;
    cnd1 -= 2;
    exit  = cnd0 | cnd1;
    exit >>= 63;
  }

  return ctr, rp;
}

inline
fn gen_matrix(stack u8[KYBER_SYMBYTES] seed, reg u64 transposed) -> stack u16[KYBER_K*KYBER_VECN]
{
  stack u8[34] extseed;
  stack u8[SHAKE128_RATE] buf;
  stack u64[25] state;
  stack u16[KYBER_K*KYBER_VECN] rr;

  reg u8 c;
  reg u16 t;
  reg u64 ctr k l;
  stack u64 sctr;
  stack u64 stransposed;
  inline int i, j;

  stransposed = transposed;

  for j = 0 to KYBER_SYMBYTES
  {
    c = seed[j];
    extseed[j] = c;
  }

  for i = 0 to KYBER_K
  {
    for j = 0 to KYBER_K
    {
      transposed = stransposed;
      if(transposed == 0)
      {
        extseed[KYBER_SYMBYTES] = j;
        extseed[KYBER_SYMBYTES+1] = i;
      }
      else
      {
        extseed[KYBER_SYMBYTES] = i;
        extseed[KYBER_SYMBYTES+1] = j;
      }

      state = shake128_absorb34(state, extseed);

      ctr = 0;
      while (ctr < KYBER_N)
      {
        sctr = ctr;
        state, buf = shake128_squeezeblock(state, buf);
        ctr = sctr;

        ctr, rr[i*KYBER_VECN+j*KYBER_N:KYBER_N] = rej_uniform(rr[i*KYBER_VECN+j*KYBER_N:KYBER_N], ctr, buf);

      }
      rr[i*KYBER_VECN+j*KYBER_N:KYBER_N] = nttunpack(rr[i*KYBER_VECN+j*KYBER_N:KYBER_N]);
    }
  }

  return rr;
}


#endif
