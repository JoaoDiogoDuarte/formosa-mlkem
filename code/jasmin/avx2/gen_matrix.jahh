#ifndef GEN_MATRIX_HH
#define GEN_MATRIX_HH

#include "fips202.jahh"
#include "fips202_4x.jahh"
#include "params.jahh"
#include "shuffle.jahh"
#include "consts.jahh"

param int GENMATRIX_NBLOCKS = 6;

u8[2048] idx = {-1, -1, -1, -1, -1, -1, -1, -1,
                0, -1, -1, -1, -1, -1, -1, -1,
                2, -1, -1, -1, -1, -1, -1, -1,
                0,  2, -1, -1, -1, -1, -1, -1,
                4, -1, -1, -1, -1, -1, -1, -1,
                0,  4, -1, -1, -1, -1, -1, -1,
                2,  4, -1, -1, -1, -1, -1, -1,
                0,  2,  4, -1, -1, -1, -1, -1,
                6, -1, -1, -1, -1, -1, -1, -1,
                0,  6, -1, -1, -1, -1, -1, -1,
                2,  6, -1, -1, -1, -1, -1, -1,
                0,  2,  6, -1, -1, -1, -1, -1,
                4,  6, -1, -1, -1, -1, -1, -1,
                0,  4,  6, -1, -1, -1, -1, -1,
                2,  4,  6, -1, -1, -1, -1, -1,
                0,  2,  4,  6, -1, -1, -1, -1,
                8, -1, -1, -1, -1, -1, -1, -1,
                0,  8, -1, -1, -1, -1, -1, -1,
                2,  8, -1, -1, -1, -1, -1, -1,
                0,  2,  8, -1, -1, -1, -1, -1,
                4,  8, -1, -1, -1, -1, -1, -1,
                0,  4,  8, -1, -1, -1, -1, -1,
                2,  4,  8, -1, -1, -1, -1, -1,
                0,  2,  4,  8, -1, -1, -1, -1,
                6,  8, -1, -1, -1, -1, -1, -1,
                0,  6,  8, -1, -1, -1, -1, -1,
                2,  6,  8, -1, -1, -1, -1, -1,
                0,  2,  6,  8, -1, -1, -1, -1,
                4,  6,  8, -1, -1, -1, -1, -1,
                0,  4,  6,  8, -1, -1, -1, -1,
                2,  4,  6,  8, -1, -1, -1, -1,
                0,  2,  4,  6,  8, -1, -1, -1,
                10, -1, -1, -1, -1, -1, -1, -1,
                0, 10, -1, -1, -1, -1, -1, -1,
                2, 10, -1, -1, -1, -1, -1, -1,
                0,  2, 10, -1, -1, -1, -1, -1,
                4, 10, -1, -1, -1, -1, -1, -1,
                0,  4, 10, -1, -1, -1, -1, -1,
                2,  4, 10, -1, -1, -1, -1, -1,
                0,  2,  4, 10, -1, -1, -1, -1,
                6, 10, -1, -1, -1, -1, -1, -1,
                0,  6, 10, -1, -1, -1, -1, -1,
                2,  6, 10, -1, -1, -1, -1, -1,
                0,  2,  6, 10, -1, -1, -1, -1,
                4,  6, 10, -1, -1, -1, -1, -1,
                0,  4,  6, 10, -1, -1, -1, -1,
                2,  4,  6, 10, -1, -1, -1, -1,
                0,  2,  4,  6, 10, -1, -1, -1,
                8, 10, -1, -1, -1, -1, -1, -1,
                0,  8, 10, -1, -1, -1, -1, -1,
                2,  8, 10, -1, -1, -1, -1, -1,
                0,  2,  8, 10, -1, -1, -1, -1,
                4,  8, 10, -1, -1, -1, -1, -1,
                0,  4,  8, 10, -1, -1, -1, -1,
                2,  4,  8, 10, -1, -1, -1, -1,
                0,  2,  4,  8, 10, -1, -1, -1,
                6,  8, 10, -1, -1, -1, -1, -1,
                0,  6,  8, 10, -1, -1, -1, -1,
                2,  6,  8, 10, -1, -1, -1, -1,
                0,  2,  6,  8, 10, -1, -1, -1,
                4,  6,  8, 10, -1, -1, -1, -1,
                0,  4,  6,  8, 10, -1, -1, -1,
                2,  4,  6,  8, 10, -1, -1, -1,
                0,  2,  4,  6,  8, 10, -1, -1,
                12, -1, -1, -1, -1, -1, -1, -1,
                0, 12, -1, -1, -1, -1, -1, -1,
                2, 12, -1, -1, -1, -1, -1, -1,
                0,  2, 12, -1, -1, -1, -1, -1,
                4, 12, -1, -1, -1, -1, -1, -1,
                0,  4, 12, -1, -1, -1, -1, -1,
                2,  4, 12, -1, -1, -1, -1, -1,
                0,  2,  4, 12, -1, -1, -1, -1,
                6, 12, -1, -1, -1, -1, -1, -1,
                0,  6, 12, -1, -1, -1, -1, -1,
                2,  6, 12, -1, -1, -1, -1, -1,
                0,  2,  6, 12, -1, -1, -1, -1,
                4,  6, 12, -1, -1, -1, -1, -1,
                0,  4,  6, 12, -1, -1, -1, -1,
                2,  4,  6, 12, -1, -1, -1, -1,
                0,  2,  4,  6, 12, -1, -1, -1,
                8, 12, -1, -1, -1, -1, -1, -1,
                0,  8, 12, -1, -1, -1, -1, -1,
                2,  8, 12, -1, -1, -1, -1, -1,
                0,  2,  8, 12, -1, -1, -1, -1,
                4,  8, 12, -1, -1, -1, -1, -1,
                0,  4,  8, 12, -1, -1, -1, -1,
                2,  4,  8, 12, -1, -1, -1, -1,
                0,  2,  4,  8, 12, -1, -1, -1,
                6,  8, 12, -1, -1, -1, -1, -1,
                0,  6,  8, 12, -1, -1, -1, -1,
                2,  6,  8, 12, -1, -1, -1, -1,
                0,  2,  6,  8, 12, -1, -1, -1,
                4,  6,  8, 12, -1, -1, -1, -1,
                0,  4,  6,  8, 12, -1, -1, -1,
                2,  4,  6,  8, 12, -1, -1, -1,
                0,  2,  4,  6,  8, 12, -1, -1,
                10, 12, -1, -1, -1, -1, -1, -1,
                0, 10, 12, -1, -1, -1, -1, -1,
                2, 10, 12, -1, -1, -1, -1, -1,
                0,  2, 10, 12, -1, -1, -1, -1,
                4, 10, 12, -1, -1, -1, -1, -1,
                0,  4, 10, 12, -1, -1, -1, -1,
                2,  4, 10, 12, -1, -1, -1, -1,
                0,  2,  4, 10, 12, -1, -1, -1,
                6, 10, 12, -1, -1, -1, -1, -1,
                0,  6, 10, 12, -1, -1, -1, -1,
                2,  6, 10, 12, -1, -1, -1, -1,
                0,  2,  6, 10, 12, -1, -1, -1,
                4,  6, 10, 12, -1, -1, -1, -1,
                0,  4,  6, 10, 12, -1, -1, -1,
                2,  4,  6, 10, 12, -1, -1, -1,
                0,  2,  4,  6, 10, 12, -1, -1,
                8, 10, 12, -1, -1, -1, -1, -1,
                0,  8, 10, 12, -1, -1, -1, -1,
                2,  8, 10, 12, -1, -1, -1, -1,
                0,  2,  8, 10, 12, -1, -1, -1,
                4,  8, 10, 12, -1, -1, -1, -1,
                0,  4,  8, 10, 12, -1, -1, -1,
                2,  4,  8, 10, 12, -1, -1, -1,
                0,  2,  4,  8, 10, 12, -1, -1,
                6,  8, 10, 12, -1, -1, -1, -1,
                0,  6,  8, 10, 12, -1, -1, -1,
                2,  6,  8, 10, 12, -1, -1, -1,
                0,  2,  6,  8, 10, 12, -1, -1,
                4,  6,  8, 10, 12, -1, -1, -1,
                0,  4,  6,  8, 10, 12, -1, -1,
                2,  4,  6,  8, 10, 12, -1, -1,
                0,  2,  4,  6,  8, 10, 12, -1,
                14, -1, -1, -1, -1, -1, -1, -1,
                0, 14, -1, -1, -1, -1, -1, -1,
                2, 14, -1, -1, -1, -1, -1, -1,
                0,  2, 14, -1, -1, -1, -1, -1,
                4, 14, -1, -1, -1, -1, -1, -1,
                0,  4, 14, -1, -1, -1, -1, -1,
                2,  4, 14, -1, -1, -1, -1, -1,
                0,  2,  4, 14, -1, -1, -1, -1,
                6, 14, -1, -1, -1, -1, -1, -1,
                0,  6, 14, -1, -1, -1, -1, -1,
                2,  6, 14, -1, -1, -1, -1, -1,
                0,  2,  6, 14, -1, -1, -1, -1,
                4,  6, 14, -1, -1, -1, -1, -1,
                0,  4,  6, 14, -1, -1, -1, -1,
                2,  4,  6, 14, -1, -1, -1, -1,
                0,  2,  4,  6, 14, -1, -1, -1,
                8, 14, -1, -1, -1, -1, -1, -1,
                0,  8, 14, -1, -1, -1, -1, -1,
                2,  8, 14, -1, -1, -1, -1, -1,
                0,  2,  8, 14, -1, -1, -1, -1,
                4,  8, 14, -1, -1, -1, -1, -1,
                0,  4,  8, 14, -1, -1, -1, -1,
                2,  4,  8, 14, -1, -1, -1, -1,
                0,  2,  4,  8, 14, -1, -1, -1,
                6,  8, 14, -1, -1, -1, -1, -1,
                0,  6,  8, 14, -1, -1, -1, -1,
                2,  6,  8, 14, -1, -1, -1, -1,
                0,  2,  6,  8, 14, -1, -1, -1,
                4,  6,  8, 14, -1, -1, -1, -1,
                0,  4,  6,  8, 14, -1, -1, -1,
                2,  4,  6,  8, 14, -1, -1, -1,
                0,  2,  4,  6,  8, 14, -1, -1,
                10, 14, -1, -1, -1, -1, -1, -1,
                0, 10, 14, -1, -1, -1, -1, -1,
                2, 10, 14, -1, -1, -1, -1, -1,
                0,  2, 10, 14, -1, -1, -1, -1,
                4, 10, 14, -1, -1, -1, -1, -1,
                0,  4, 10, 14, -1, -1, -1, -1,
                2,  4, 10, 14, -1, -1, -1, -1,
                0,  2,  4, 10, 14, -1, -1, -1,
                6, 10, 14, -1, -1, -1, -1, -1,
                0,  6, 10, 14, -1, -1, -1, -1,
                2,  6, 10, 14, -1, -1, -1, -1,
                0,  2,  6, 10, 14, -1, -1, -1,
                4,  6, 10, 14, -1, -1, -1, -1,
                0,  4,  6, 10, 14, -1, -1, -1,
                2,  4,  6, 10, 14, -1, -1, -1,
                0,  2,  4,  6, 10, 14, -1, -1,
                8, 10, 14, -1, -1, -1, -1, -1,
                0,  8, 10, 14, -1, -1, -1, -1,
                2,  8, 10, 14, -1, -1, -1, -1,
                0,  2,  8, 10, 14, -1, -1, -1,
                4,  8, 10, 14, -1, -1, -1, -1,
                0,  4,  8, 10, 14, -1, -1, -1,
                2,  4,  8, 10, 14, -1, -1, -1,
                0,  2,  4,  8, 10, 14, -1, -1,
                6,  8, 10, 14, -1, -1, -1, -1,
                0,  6,  8, 10, 14, -1, -1, -1,
                2,  6,  8, 10, 14, -1, -1, -1,
                0,  2,  6,  8, 10, 14, -1, -1,
                4,  6,  8, 10, 14, -1, -1, -1,
                0,  4,  6,  8, 10, 14, -1, -1,
                2,  4,  6,  8, 10, 14, -1, -1,
                0,  2,  4,  6,  8, 10, 14, -1,
                12, 14, -1, -1, -1, -1, -1, -1,
                0, 12, 14, -1, -1, -1, -1, -1,
                2, 12, 14, -1, -1, -1, -1, -1,
                0,  2, 12, 14, -1, -1, -1, -1,
                4, 12, 14, -1, -1, -1, -1, -1,
                0,  4, 12, 14, -1, -1, -1, -1,
                2,  4, 12, 14, -1, -1, -1, -1,
                0,  2,  4, 12, 14, -1, -1, -1,
                6, 12, 14, -1, -1, -1, -1, -1,
                0,  6, 12, 14, -1, -1, -1, -1,
                2,  6, 12, 14, -1, -1, -1, -1,
                0,  2,  6, 12, 14, -1, -1, -1,
                4,  6, 12, 14, -1, -1, -1, -1,
                0,  4,  6, 12, 14, -1, -1, -1,
                2,  4,  6, 12, 14, -1, -1, -1,
                0,  2,  4,  6, 12, 14, -1, -1,
                8, 12, 14, -1, -1, -1, -1, -1,
                0,  8, 12, 14, -1, -1, -1, -1,
                2,  8, 12, 14, -1, -1, -1, -1,
                0,  2,  8, 12, 14, -1, -1, -1,
                4,  8, 12, 14, -1, -1, -1, -1,
                0,  4,  8, 12, 14, -1, -1, -1,
                2,  4,  8, 12, 14, -1, -1, -1,
                0,  2,  4,  8, 12, 14, -1, -1,
                6,  8, 12, 14, -1, -1, -1, -1,
                0,  6,  8, 12, 14, -1, -1, -1,
                2,  6,  8, 12, 14, -1, -1, -1,
                0,  2,  6,  8, 12, 14, -1, -1,
                4,  6,  8, 12, 14, -1, -1, -1,
                0,  4,  6,  8, 12, 14, -1, -1,
                2,  4,  6,  8, 12, 14, -1, -1,
                0,  2,  4,  6,  8, 12, 14, -1,
                10, 12, 14, -1, -1, -1, -1, -1,
                0, 10, 12, 14, -1, -1, -1, -1,
                2, 10, 12, 14, -1, -1, -1, -1,
                0,  2, 10, 12, 14, -1, -1, -1,
                4, 10, 12, 14, -1, -1, -1, -1,
                0,  4, 10, 12, 14, -1, -1, -1,
                2,  4, 10, 12, 14, -1, -1, -1,
                0,  2,  4, 10, 12, 14, -1, -1,
                6, 10, 12, 14, -1, -1, -1, -1,
                0,  6, 10, 12, 14, -1, -1, -1,
                2,  6, 10, 12, 14, -1, -1, -1,
                0,  2,  6, 10, 12, 14, -1, -1,
                4,  6, 10, 12, 14, -1, -1, -1,
                0,  4,  6, 10, 12, 14, -1, -1,
                2,  4,  6, 10, 12, 14, -1, -1,
                0,  2,  4,  6, 10, 12, 14, -1,
                8, 10, 12, 14, -1, -1, -1, -1,
                0,  8, 10, 12, 14, -1, -1, -1,
                2,  8, 10, 12, 14, -1, -1, -1,
                0,  2,  8, 10, 12, 14, -1, -1,
                4,  8, 10, 12, 14, -1, -1, -1,
                0,  4,  8, 10, 12, 14, -1, -1,
                2,  4,  8, 10, 12, 14, -1, -1,
                0,  2,  4,  8, 10, 12, 14, -1,
                6,  8, 10, 12, 14, -1, -1, -1,
                0,  6,  8, 10, 12, 14, -1, -1,
                2,  6,  8, 10, 12, 14, -1, -1,
                0,  2,  6,  8, 10, 12, 14, -1,
                4,  6,  8, 10, 12, 14, -1, -1,
                0,  4,  6,  8, 10, 12, 14, -1,
                2,  4,  6,  8, 10, 12, 14, -1,
                0,  2,  4,  6,  8, 10, 12, 14};

inline
fn shake128_squeezenblocks(stack u64[25] state, stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] out) 
      -> stack u64[25], stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE]
{
  inline int i;

  for i = 0 to GENMATRIX_NBLOCKS 
  {
      state, out[i*SHAKE128_RATE:SHAKE128_RATE] = shake128_squeezeblock(state, out[i*SHAKE128_RATE:SHAKE128_RATE]);
  }
  return state, out;
}


inline
fn shake128_squeezenblocks4x(reg ptr u256[25] state,
                              reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] h0,
                              reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] h1,
                              reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] h2,
                              reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] h3)
  -> reg ptr u256[25], reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE], reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE], reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE], reg ptr u8[GENMATRIX_NBLOCKS*SHAKE128_RATE]
{
  inline int i;

  for i = 0 to GENMATRIX_NBLOCKS
  {
    state, h0[i*SHAKE128_RATE:SHAKE128_RATE], h1[i*SHAKE128_RATE:SHAKE128_RATE], h2[i*SHAKE128_RATE:SHAKE128_RATE], h3[i*SHAKE128_RATE:SHAKE128_RATE] = shake128_squeezeblock4x(state, h0[i*SHAKE128_RATE:SHAKE128_RATE], h1[i*SHAKE128_RATE:SHAKE128_RATE], h2[i*SHAKE128_RATE:SHAKE128_RATE], h3[i*SHAKE128_RATE:SHAKE128_RATE]);
  }

  return state, h0, h1, h2, h3;
}


inline
fn rej_uniform(stack u16[KYBER_N] rp, reg u64 offset, stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf, inline int buflen) ->  reg u64, stack u16[KYBER_N]
{
  reg u16 val0 val1;
  reg u16 t;
  reg u64 pos ctr;
  reg u64 cnd0 cnd1 exit;


  ctr = offset;
  pos = 0;
  exit = 0;

  while(exit == 0)
  {
    val0 = (16u)buf[(int)pos];
    pos += 1;

    t   = (16u)buf[(int)pos];
    val1 = t;
    val1 >>= 4;

    t &= 0x0F;
    t <<= 8;
    val0 |= t;
    pos += 1;

    t   = (16u)buf[(int)pos];
    t <<= 4;
    val1 |= t;
    pos += 1;

    if(val0 < KYBER_Q)
    {
      rp[(int)ctr] = val0;
      ctr += 1;
    }

    if(ctr < KYBER_N)
    {
      if(val1 < KYBER_Q)
      {
        rp[(int)ctr] = val1;
        ctr += 1;
      }
    }

    // Check if we should exit the loop
    cnd0  = KYBER_N;
    cnd0 -= ctr;
    cnd0 -= 1;
    cnd1  = buflen;
    cnd1 -= pos;
    cnd1 -= 3;
    exit  = cnd0 | cnd1;
    exit >>= 63;
  }

  return ctr, rp;
}

u8 ones_s = 1;
u16 mask_s = 0x0FFF;
u8[32] idx8_s = {0, 1, 1, 2, 3, 4, 4, 5,
                 6, 7, 7, 8, 9, 10, 10, 11,
                 4, 5, 5, 6, 7, 8, 8, 9,
                 10, 11, 11, 12, 13, 14, 14, 15};

inline
fn rej_uniform_avx(stack u16[KYBER_N] rp, reg u64 offset, stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf, inline int buflen) -> reg u64, stack u16[KYBER_N]
{
  reg u256 f0 f1 g0 g1 g2 g3;
  reg u256 bound ones mask idx8;
  reg u128 f t pilo pihi;
  reg u64 pos ctr t64;
  reg u64 cnd exit;
  reg u32 good t32;
  reg u16 val0 val1 t16;
  reg ptr u8[2048] idxp;

  idxp = idx;

  bound = jqx16[u256 0];
  ones = #VPBROADCAST_32u8(ones_s);
  mask = #VPBROADCAST_16u16(mask_s);
  idx8 = idx8_s[u256 0];

  ctr = 0;
  pos = 0;
  exit = 0;

  while(exit == 0)
  {
    f0 = buf.[u256 (int)pos];
    pos += 24;
    f1 = buf.[u256 (int)pos];
    pos += 24;
    f0 = #VPERMQ(f0, 0x94);
    f1 = #VPERMQ(f1, 0x94);
    f0 = #VPSHUFB_256(f0, idx8);
    f1 = #VPSHUFB_256(f1, idx8);
    g0 = #VPSRL_16u16(f0, 4);
    g1 = #VPSRL_16u16(f1, 4);
    f0 = #VPBLEND_16u16(f0, g0, 0xAA);
    f1 = #VPBLEND_16u16(f1, g1, 0xAA);
    f0 = #VPAND_256(f0, mask);
    f1 = #VPAND_256(f1, mask);

    g0 = #VPCMPGT_16u16(bound, f0);
    g1 = #VPCMPGT_16u16(bound, f1);

    g0 = #VPACKSS_16u16(g0, g1);
    good = #VPMOVMSKB_u256u32(g0);

    t64 = (64u)good;
    t64 &= 0xFF;
    f = #MOVD_64(idxp[u64 (int)t64]);
    g0 = #VINSERTI128(g0, f, 0);

    t64 = (64u)good;
    t64 >>= 8;
    t64 &= 0xFF;
    f = #MOVD_64(idxp[u64 (int)t64]);
    g1 = #VINSERTI128(g1, f, 0);

    t64 = (64u)good;
    t64 >>= 16;
    t64 &= 0xFF;
    f = #MOVD_64(idxp[u64 (int)t64]);
    g0 = #VINSERTI128(g0, f, 1);

    t64 = (64u)good;
    t64 >>= 24;
    t64 &= 0xFF;
    f = #MOVD_64(idxp[u64 (int)t64]);
    g1 = #VINSERTI128(g1, f, 1);

    g2 = #VPADD_32u8(g0, ones);
    g3 = #VPADD_32u8(g1, ones);
    g0 = #VPUNPCKL_32u8(g0, g2);
    g1 = #VPUNPCKL_32u8(g1, g3);

    f0 = #VPSHUFB_256(f0, g0);
    f1 = #VPSHUFB_256(f1, g1);

    f = (128u)f0;
    rp.[u128 2*(int)ctr] = f;

    t64 = (64u)good;
    t64 &= 0xFF;
    _, _, _, _, _, t64 = #POPCNT_64(t64);
    ctr += t64;
    f = #VEXTRACTI128(f0, 1);
    rp.[u128 2*(int)ctr] = f;

    t64 = (64u)good;
    t64 >>= 16;
    t64 &= 0xFF;
    _, _, _, _, _, t64 = #POPCNT_64(t64);
    ctr += t64;
    f = (128u)f1;
    rp.[u128 2*(int)ctr] = f;

    t64 = (64u)good;
    t64 >>= 8;
    t64 &= 0xFF;
    t64 = t64;
    _, _, _, _, _, t64 = #POPCNT_64(t64);
    ctr += t64;
    f = #VEXTRACTI128(f1, 1);
    rp.[u128 2*(int)ctr] = f;

    good >>= 24;
    good &= 0xFF;
    _, _, _, _, _, good = #POPCNT_32(good);
    t64 = (64u)good;
    ctr += t64;

    cnd = KYBER_N;
    cnd -= 32;
    cnd -= ctr;
    exit = cnd;
    cnd = buflen;
    cnd -= 48;
    cnd -= pos;
    exit |= cnd;
    exit >>= 63;
  }

  cnd = KYBER_N;
  cnd -= 8;
  cnd -= ctr;
  exit = cnd;
  cnd = buflen;
  cnd -= 12;
  cnd -= pos;
  exit |= cnd;
  exit >>= 63;

  while(exit == 0)
  {
    f = buf.[u128 (int)pos];
    f = #VPSHUFB_128(f, idx8);
    t = #VPSRL_8u16(f, 4);
    f = #VPBLEND_8u16(f, t, 0xAA);
    f = #VPAND_128(f, mask);
    pos += 12;

    t = #VPCMPGT_8u16(bound, f);
    good = #VPMOVMSKB_u128u32(t);

    t32 = 0x5555;
    good = #PEXT_32(good, t32);
    t64 = (64u)good;
    pilo = #MOVD_64(idxp[u64 (int)t64]);

    pihi = #VPADD_16u8(pilo, ones);
    pilo = #VPUNPCKL_16u8(pilo, pihi);
    f = #VPSHUFB_128(f, pilo);
    rp.[u128 2*(int)ctr] = f;
    _, _, _, _, _, good =  #POPCNT_32(good);
    t64 = (64u)good;
    ctr += t64;

    cnd = KYBER_N;
    cnd -= 8;
    cnd -= ctr;
    exit = cnd;
    cnd = buflen;
    cnd -= 12;
    cnd -= pos;
    exit |= cnd;
    exit >>= 63;
  }

  cnd = KYBER_N;
  cnd -= 1;
  cnd -= ctr;
  exit = cnd;
  cnd = buflen;
  cnd -= 3;
  cnd -= pos;
  exit |= cnd;
  exit >>= 63;

  while(exit == 0)
  {
    val0 = (16u)buf[(int)pos];
    pos += 1;
    t16 = (16u)buf[(int)pos];
    pos += 1;
    val1 = t16;

    t16 <<= 8;
    val0 |= t16;
    val0 &= 0xFFF;

    val1 &= 0xF;
    t16 = (16u)buf[(int)pos];
    pos += 1;
    t16 <<= 4;
    val1 |= t16;

    if(val0 < KYBER_Q)
    {
      rp[(int)ctr] = val0;
      ctr += 1;
    }
    if(val1 < KYBER_Q)
    {
      if(ctr < KYBER_N)
      {
        rp[(int)ctr] = val1;
        ctr += 1;
      }
    }

    cnd = KYBER_N;
    cnd -= 1;
    cnd -= ctr;
    exit = cnd;
    cnd = buflen;
    cnd -= 3;
    cnd -= pos;
    exit |= cnd;
    exit >>= 63;
  }

  return ctr, rp;
}

inline
fn gen_matrix_old(stack u8[KYBER_SYMBYTES] seed, inline int transposed) -> stack u16[KYBER_K*KYBER_VECN]
{
  stack u8[34] extseed;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf;
  stack u64[25] state;
  stack u16[KYBER_K*KYBER_VECN] rr;

  reg u8 c;
  reg u16 t;
  reg u64 ctr k l;
  stack u64 sctr;
  inline int i, j, k;

  for j = 0 to KYBER_SYMBYTES
  {
    c = seed[j];
    extseed[j] = c;
  }

  for i = 0 to KYBER_K
  {
    for j = 0 to KYBER_K
    {
      if(transposed == 0)
      {
        extseed[KYBER_SYMBYTES] = j;
        extseed[KYBER_SYMBYTES+1] = i;
      }
      else
      {
        extseed[KYBER_SYMBYTES] = i;
        extseed[KYBER_SYMBYTES+1] = j;
      }

      state = shake128_absorb34(state, extseed);

      state, buf = shake128_squeezenblocks(state, buf);
      ctr = 0;
      ctr, rr[i*KYBER_VECN+j*KYBER_N:KYBER_N] = rej_uniform(rr[i*KYBER_VECN+j*KYBER_N:KYBER_N], ctr, buf, GENMATRIX_NBLOCKS*SHAKE128_RATE);
      
      while (ctr < KYBER_N)
      {
        state, buf[0:SHAKE128_RATE] = shake128_squeezeblock(state, buf[0:SHAKE128_RATE]);
        ctr, rr[i*KYBER_VECN+j*KYBER_N:KYBER_N] = rej_uniform(rr[i*KYBER_VECN+j*KYBER_N:KYBER_N], ctr, buf, SHAKE128_RATE);
      }
      rr[i*KYBER_VECN+j*KYBER_N:KYBER_N] = nttunpack(rr[i*KYBER_VECN+j*KYBER_N:KYBER_N]);
    }
  }

  return rr;
}

inline fn __r2s(reg u256 f) -> stack u256 {
  stack u256 fs;
  fs = f;
  return f;
}


inline fn __s2r(stack u256 fs) -> reg u256 {
  reg u256 f;
  f = fs;
  return f;
}


inline
fn gen_matrix(stack u8[KYBER_SYMBYTES] seed, inline int transposed) -> stack u16[KYBER_K*KYBER_VECN]
{
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf0;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf1;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf2;
  stack u8[GENMATRIX_NBLOCKS*SHAKE128_RATE] buf3;
  stack u256[25] state;
  stack u16[KYBER_K*KYBER_VECN] rr;
  stack u256 fs;

  reg u256 f;
  reg u64 ctr0 ctr1 ctr2 ctr3;
  inline int i, j;

  f = seed[u256 0];
  buf0[u256 0] = f;
  buf1[u256 0] = f;
  buf2[u256 0] = f;
  buf3[u256 0] = f;
  fs = __r2s(f);

  if(transposed == 1)
  {
    buf0[KYBER_SYMBYTES]   = 0;
    buf0[KYBER_SYMBYTES+1] = 0;
    buf1[KYBER_SYMBYTES]   = 0;
    buf1[KYBER_SYMBYTES+1] = 1;
    buf2[KYBER_SYMBYTES]   = 0;
    buf2[KYBER_SYMBYTES+1] = 2;
    buf3[KYBER_SYMBYTES]   = 1;
    buf3[KYBER_SYMBYTES+1] = 0;
  }
  else
  {
    buf0[KYBER_SYMBYTES]   = 0;
    buf0[KYBER_SYMBYTES+1] = 0;
    buf1[KYBER_SYMBYTES]   = 1;
    buf1[KYBER_SYMBYTES+1] = 0;
    buf2[KYBER_SYMBYTES]   = 2;
    buf2[KYBER_SYMBYTES+1] = 0;
    buf3[KYBER_SYMBYTES]   = 0;
    buf3[KYBER_SYMBYTES+1] = 1;
  }

  state = shake128_absorb4x_34(state, buf0[0:34], buf1[0:34], buf2[0:34], buf3[0:34]);
  state, buf0, buf1, buf2, buf3 = shake128_squeezenblocks4x(state, buf0, buf1, buf2, buf3);

  ctr0 = 0;
  ctr1 = 0;
  ctr2 = 0;
  ctr3 = 0;

  ctr0, rr[0*KYBER_VECN+0*KYBER_N:KYBER_N] = rej_uniform(rr[0*KYBER_VECN+0*KYBER_N:KYBER_N], ctr0, buf0, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  ctr1, rr[0*KYBER_VECN+1*KYBER_N:KYBER_N] = rej_uniform(rr[0*KYBER_VECN+1*KYBER_N:KYBER_N], ctr1, buf1, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  ctr2, rr[0*KYBER_VECN+2*KYBER_N:KYBER_N] = rej_uniform(rr[0*KYBER_VECN+2*KYBER_N:KYBER_N], ctr2, buf2, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  ctr3, rr[1*KYBER_VECN+0*KYBER_N:KYBER_N] = rej_uniform(rr[1*KYBER_VECN+0*KYBER_N:KYBER_N], ctr3, buf3, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  //TODO: Check if enough has been generated; squeeze more

  f = __s2r(fs);
  buf0[u256 0] = f;
  buf1[u256 0] = f;
  buf2[u256 0] = f;
  buf3[u256 0] = f;
  fs = __r2s(f);

  if(transposed == 1)
  {
    buf0[KYBER_SYMBYTES]   = 1;
    buf0[KYBER_SYMBYTES+1] = 1;
    buf1[KYBER_SYMBYTES]   = 1;
    buf1[KYBER_SYMBYTES+1] = 2;
    buf2[KYBER_SYMBYTES]   = 2;
    buf2[KYBER_SYMBYTES+1] = 0;
    buf3[KYBER_SYMBYTES]   = 2;
    buf3[KYBER_SYMBYTES+1] = 1;
  }
  else
  {
    buf0[KYBER_SYMBYTES]   = 1;
    buf0[KYBER_SYMBYTES+1] = 1;
    buf1[KYBER_SYMBYTES]   = 2;
    buf1[KYBER_SYMBYTES+1] = 1;
    buf2[KYBER_SYMBYTES]   = 0;
    buf2[KYBER_SYMBYTES+1] = 2;
    buf3[KYBER_SYMBYTES]   = 1;
    buf3[KYBER_SYMBYTES+1] = 2;
  }


  state = shake128_absorb4x_34(state, buf0[0:34], buf1[0:34], buf2[0:34], buf3[0:34]);
  state, buf0, buf1, buf2, buf3 = shake128_squeezenblocks4x(state, buf0, buf1, buf2, buf3);

  ctr0 = 0;
  ctr1 = 0;
  ctr2 = 0;
  ctr3 = 0;

  ctr0, rr[1*KYBER_VECN+1*KYBER_N:KYBER_N] = rej_uniform(rr[1*KYBER_VECN+1*KYBER_N:KYBER_N], ctr0, buf0, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  ctr1, rr[1*KYBER_VECN+2*KYBER_N:KYBER_N] = rej_uniform(rr[1*KYBER_VECN+2*KYBER_N:KYBER_N], ctr1, buf1, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  ctr2, rr[2*KYBER_VECN+0*KYBER_N:KYBER_N] = rej_uniform(rr[2*KYBER_VECN+0*KYBER_N:KYBER_N], ctr2, buf2, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  ctr3, rr[2*KYBER_VECN+1*KYBER_N:KYBER_N] = rej_uniform(rr[2*KYBER_VECN+1*KYBER_N:KYBER_N], ctr3, buf3, GENMATRIX_NBLOCKS*SHAKE128_RATE);

  //TODO: Check if enough has been generated; squeeze more

  f = seed[u256 0];
  buf0[u256 0] = f;
  buf0[KYBER_SYMBYTES]   = 2;
  buf0[KYBER_SYMBYTES+1] = 2;

  state[u64 0:25] = shake128_absorb34(state[u64 0:25], buf0[0:34]);

  state[u64 0:25], buf0 = shake128_squeezenblocks(state[u64 0:25], buf0);


  ctr0 = 0;
  ctr0, rr[2*KYBER_VECN+2*KYBER_N:KYBER_N] = rej_uniform(rr[2*KYBER_VECN+2*KYBER_N:KYBER_N], ctr0, buf0, GENMATRIX_NBLOCKS*SHAKE128_RATE);
  
  //TODO: Check if enough has been generated; squeeze more

  for i = 0 to KYBER_K
  {
    for j = 0 to KYBER_K
    {
      rr[i*KYBER_VECN+j*KYBER_N:KYBER_N] = nttunpack(rr[i*KYBER_VECN+j*KYBER_N:KYBER_N]);
    }
  }

  return rr;
}

#endif
