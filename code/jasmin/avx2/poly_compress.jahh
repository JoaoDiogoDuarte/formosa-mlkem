#ifndef POLY_COMPRESS_HH
#define POLY_COMPRESS_HH

#include "params.jahh"
#include "poly_csubq.jahh"

fn poly_compress(reg u64 rp, reg ptr u16[KYBER_N] a) -> reg ptr u16[KYBER_N]
{
  reg u16 t;
  reg u32 d0, d1;
  reg u64 i j;

  a = poly_csubq(a);

  i = 0;
  j = 0;
  while(i < 128)
  {
    t  = a[(int)j];
    d0 = (32u)t;
    d0 <<= 4;
    d0 += 1665;
    d0 *= 80635;
    d0 >>= 28;
    d0 &= 0xf;
    j += 1;
    t  = a[(int)j];
    d1 = (32u)t;
    d1 <<= 4;
    d1 += 1665;
    d1 *= 80635;
    d1 >>= 28;
    d1 &= 0xf;
    d1 <<= 4;
    d0 |= d1;
    (u8)[rp+i] = d0;
    i += 1;
    j += 1;
  }
  return a;
}

u16 shift1_s = 0x200;
u16 mask_s = 0x0F;
u16 shift2_s = 0x1001;
u32[8] permidx_s = {0,4,1,5,2,6,3,7};

fn poly_compress_avx(reg u64 rp, reg ptr u16[KYBER_N] a) -> reg ptr u16[KYBER_N]
{
  inline int i;
  reg u256 f0 f1 f2 f3 v shift1 mask shift2 permidx;
  reg u128 t0 t1 t3;
  reg ptr u16[16] x16p;
  reg u64 t64;
  reg u32 t32;
  reg u16 t16;

  a = poly_csubq(a);

  x16p = jvx16;
  v = x16p[u256 0];
  shift1 = #VPBROADCAST_16u16(shift1_s);
  mask = #VPBROADCAST_16u16(mask_s);
  shift2 = #VPBROADCAST_16u16(shift2_s);
  permidx = permidx_s[u256 0];

  for i=0 to KYBER_N/64
  {
    f0 = a[u256 4*i];
    f1 = a[u256 4*i + 1];
    f2 = a[u256 4*i + 2];
    f3 = a[u256 4*i + 3];
    f0 = #VPMULH_16u16(f0, v);
    f1 = #VPMULH_16u16(f1, v);
    f2 = #VPMULH_16u16(f2, v);
    f3 = #VPMULH_16u16(f3, v);
    f0 = #VPMULHRS_16u16(f0, shift1);
    f1 = #VPMULHRS_16u16(f1, shift1);
    f2 = #VPMULHRS_16u16(f2, shift1);
    f3 = #VPMULHRS_16u16(f3, shift1);
    f0 = #VPAND_256(f0, mask);
    f1 = #VPAND_256(f1, mask);
    f2 = #VPAND_256(f2, mask);
    f3 = #VPAND_256(f3, mask);
    f0 = #VPACKUS_16u16(f0, f1);
    f2 = #VPACKUS_16u16(f2, f3);
    f0 = #VPADD_16u16(f0, shift2); //FIXME: f0 = #VPMADDUS_16u16(f0, shift2);
    f2 = #VPADD_16u16(f2, shift2); //FIXME: f2 = #VPMADDUS_16u16(f2, shift2);
    f0 = #VPACKUS_16u16(f0, f2);
    f0 = #VPAND_256(permidx, f0);  //FIXME: f0 = VPERMD(f0, permidx);
    (u256)[rp + 32*i] = f0;
  }

  return a;
}

#endif
