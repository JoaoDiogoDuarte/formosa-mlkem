#include "params.jahh"
#include "polyvec_compress.jahh"
#include "polyvec_decompress.jahh"
#include "polyvec_tobytes.jahh"
#include "polyvec_frombytes.jahh"
#include "polyvec_add2.jahh"
#include "polyvec_ntt.jahh"
#include "polyvec_invntt.jahh"
#include "polyvec_pointwise_acc.jahh"
#include "polyvec_csubq.jahh"
#include "polyvec_reduce.jahh"

export fn poly_ntt2_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_N {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = poly_ntt2(r);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

/* These exported functions are just for unit testing */

export fn polyvec_tobytes_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_VECN] a;

  for i = 0 to KYBER_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  polyvec_tobytes(rp, a);
}


export fn polyvec_decompress_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_VECN] r;

  r = polyvec_decompress(ap);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}


export fn polyvec_compress_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_VECN] a;

  for i = 0 to KYBER_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  polyvec_compress(rp, a);
}


export fn polyvec_frombytes_jazz(reg u64 rp, reg u64 ap) 
{
  inline int i;
  reg u16 t;
  reg u8 c;
  stack u16[KYBER_VECN] r;

  r = polyvec_frombytes(ap);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_add2_jazz(reg u64 rp, reg u64 bp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_VECN] a;
  stack u16[KYBER_VECN] b;
  stack u16[KYBER_VECN] r;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r = polyvec_add2(a, b);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_pointwise_acc_jazz(reg u64 rp, reg u64 ap, reg u64 bp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_VECN] a;
  stack u16[KYBER_VECN] b;
  stack u16[KYBER_N] r;

  for i = 0 to KYBER_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r = polyvec_pointwise_acc(a, b);

  for i = 0 to KYBER_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_ntt_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_VECN] r;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = polyvec_ntt(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_invntt_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_VECN] r;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = polyvec_invntt(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_csubq_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_VECN] r;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = polyvec_csubq(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_reduce_jazz(reg u64 rp) 
{
  inline int i;
  reg u16 t;
  stack u16[KYBER_VECN] r;

  for i = 0 to KYBER_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = polyvec_reduce(r);

  for i = 0 to KYBER_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

