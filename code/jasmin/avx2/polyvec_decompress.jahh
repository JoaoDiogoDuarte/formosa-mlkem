#ifndef POLYVEC_DECOMPRESS_HH
#define POLYVEC_DECOMPRESS_HH

#include "params.jahh"


u32 q_s = 0x0d013404;
u8[32] shufbdidx_s = {0, 1, 1, 2, 2, 3, 3, 4,
                     5, 6, 6, 7, 7, 8, 8, 9,
                     2, 3, 3, 4, 4, 5, 5, 6,
                     7, 8, 8, 9, 9, 10, 10, 11};
u64 sllvdidx_s = 0x04;
u32 mask_s = 0x7fe01ff8;

inline
fn polyvec_decompress(reg u64 rp) -> stack u16[KYBER_VECN]
{
  inline int i k;
  reg u256 f q shufbidx sllvdidx mask;
  stack u16[KYBER_VECN] r;

  q = #VPBROADCAST_8u32(q_s);
  shufbidx = shufbdidx_s[u256 0];
  sllvdidx = #VPBROADCAST_4u64(sllvdidx_s);
  mask = #VPBROADCAST_8u32(mask_s);

  for k=0 to KYBER_K
  {
    for i=0 to KYBER_N/16
    {
      f = (u256)[rp + 320 * k + 20 * i];
      f = #VPERMQ(f, 0x94);
      f = #VPSHUFB_256(f, shufbidx);
      f = #VPSLLV_8u32(f, sllvdidx);
      f = #VPSRL_16u16(f, 1);
      f = #VPAND_256(f, mask);
      f = #VPMULHRS_16u16(f, q);
      r[u256 16*k + i] = f;
    }
  }

  return r;
}

#endif
