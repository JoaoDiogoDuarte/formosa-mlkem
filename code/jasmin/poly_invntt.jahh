#ifndef POLY_INVNTT_HH
#define POLY_INVNTT_HH

#include "params.jahh"
#include "reduce.jahh"

fn poly_invntt(stack u16[KYBER_N] rp, reg u64 zetasp) -> stack u16[KYBER_N]
{
  reg u64 len;  
  reg u64 start;
  reg u64 j;
  reg u64 cmp;
  reg u64 offset;
  
  reg u16 zeta;
  reg u16 t;
  reg u16 s;
  reg u16 m;
  stack u64 szetasp;

  szetasp = zetasp;

  len = 2;
  while (len <= 128)
  {
    start = 0;
    while (start < 256)
    {
      zeta = (u16)[zetasp];
      zetasp += 2;
      j = start;
      cmp = start + len;
      while (j < cmp)
      {
        offset = j + len;
        s = rp[(int)offset];
        t = rp[(int)j];
        m = s + t;
        m = barrett_reduce(m);
        rp[(int)j] = m;
        t -= s;
        t = fqmul(t, zeta);
        rp[(int)offset] = t;
        j += 1;
      }
      start = j + len;
    }
    len <<= 1;
  }

  zetasp = szetasp;
  zeta = (u16)[zetasp + 254];

  j = 0;
  while (j < KYBER_N) 
  {
    t = rp[(int)j];
    t = fqmul(t, zeta);
    rp[(int)j] = t;
    j += 1;
  }
  return rp;
}

#endif
