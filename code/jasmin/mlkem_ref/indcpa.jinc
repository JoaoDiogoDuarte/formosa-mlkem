require "params.jinc"
require "poly.jinc"
require "polyvec.jinc"
require "gen_matrix.jinc"

inline
fn __indcpa_keypair(
    reg ptr u8[MLKEM_PUBLICKEYBYTES] pk,
    reg ptr u8[MLKEM_SECRETKEYBYTES] sk,
    reg ptr u8[MLKEM_SYMBYTES] randomnessp)
    -> reg ptr u8[MLKEM_PUBLICKEYBYTES], reg ptr u8[MLKEM_SECRETKEYBYTES]
{
  stack u16[MLKEM_K * MLKEM_VECN] a;
  stack u16[MLKEM_VECN] e pkpv skpv;
  stack u8[64] buf;
  stack u8[MLKEM_SYMBYTES] publicseed noiseseed;
  stack u8[32] inbuf;
  reg u8 nonce;

  () = #spill(pk, sk);

  inbuf = #copy(randomnessp[0:MLKEM_SYMBYTES]);

  buf = _sha3512_32(buf, inbuf);

  publicseed = #copy(buf[0:MLKEM_SYMBYTES]);
  noiseseed = #copy(buf[MLKEM_SYMBYTES:MLKEM_SYMBYTES]);

  a = __gen_matrix(publicseed);

  nonce = 0;
  skpv[0:MLKEM_N] = _poly_getnoise(skpv[0:MLKEM_N], noiseseed, nonce);
  nonce = 1;
  skpv[MLKEM_N:MLKEM_N] = _poly_getnoise(skpv[MLKEM_N:MLKEM_N], noiseseed, nonce);
  nonce = 2;
  skpv[2*MLKEM_N:MLKEM_N] = _poly_getnoise(skpv[2*MLKEM_N:MLKEM_N], noiseseed, nonce);

  nonce = 3;
  e[0:MLKEM_N] = _poly_getnoise(e[0:MLKEM_N], noiseseed, nonce);
  nonce = 4;
  e[MLKEM_N:MLKEM_N] = _poly_getnoise(e[MLKEM_N:MLKEM_N], noiseseed, nonce);
  nonce = 5;
  e[2*MLKEM_N:MLKEM_N] = _poly_getnoise(e[2*MLKEM_N:MLKEM_N], noiseseed, nonce);

  skpv = __polyvec_ntt(skpv);
  e    = __polyvec_ntt(e);

  pkpv[0:MLKEM_N] = __polyvec_pointwise_acc(a[0:MLKEM_VECN], skpv);
  pkpv[0:MLKEM_N] = _poly_frommont(pkpv[0:MLKEM_N]);
  pkpv[MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(a[MLKEM_VECN:MLKEM_VECN], skpv);
  pkpv[MLKEM_N:MLKEM_N] = _poly_frommont(pkpv[MLKEM_N:MLKEM_N]);
  pkpv[2*MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(a[2*MLKEM_VECN:MLKEM_VECN], skpv);
  pkpv[2*MLKEM_N:MLKEM_N] = _poly_frommont(pkpv[2*MLKEM_N:MLKEM_N]);

  pkpv = __polyvec_add2(pkpv, e);
  pkpv = __polyvec_reduce(pkpv);

  () = #unspill(pk, sk);

  pk[0:MLKEM_POLYVECBYTES] = __polyvec_tobytes(pk[0:MLKEM_POLYVECBYTES], pkpv);
  sk[0:MLKEM_POLYVECBYTES] = __polyvec_tobytes(sk[0:MLKEM_POLYVECBYTES], skpv);

  pk[MLKEM_POLYVECBYTES:MLKEM_SYMBYTES] = publicseed;

  return pk, sk;
}

inline
fn __indcpa_enc(
    reg ptr u8[MLKEM_CT_LEN] ct,
    reg ptr u8[32] msgp,
    reg ptr u8[MLKEM_PUBLICKEYBYTES] pk,
    reg ptr u8[MLKEM_SYMBYTES] noiseseed)
    -> reg ptr u8[MLKEM_CT_LEN]
{
  stack u16[MLKEM_VECN] pkpv sp ep bp;
  stack u16[MLKEM_K*MLKEM_VECN] aat;
  stack u16[MLKEM_N] k epp v;
  stack u8[MLKEM_SYMBYTES] publicseed;
  reg u8 nonce;
  stack u8[MLKEM_SYMBYTES] s_noiseseed;

  s_noiseseed = noiseseed;

  () = #spill(ct);

  pkpv = __polyvec_frombytes(pk);
  publicseed = #copy(pk[MLKEM_POLYVECBYTES:MLKEM_SYMBYTES]);

  k = _i_poly_frommsg(k, msgp);

  aat = __gen_matrix_transpose(publicseed);

  nonce = 0;
  sp[0:MLKEM_N] = _poly_getnoise(sp[0:MLKEM_N], s_noiseseed, nonce);

  nonce = 1;
  sp[MLKEM_N:MLKEM_N] = _poly_getnoise(sp[MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 2;
  sp[2*MLKEM_N:MLKEM_N] = _poly_getnoise(sp[2*MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 3;
  ep[0:MLKEM_N] = _poly_getnoise(ep[0:MLKEM_N], s_noiseseed, nonce);

  nonce = 4;
  ep[MLKEM_N:MLKEM_N] = _poly_getnoise(ep[MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 5;
  ep[2*MLKEM_N:MLKEM_N] = _poly_getnoise(ep[2*MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 6;
  epp = _poly_getnoise(epp, s_noiseseed, nonce);
  sp = __polyvec_ntt(sp);

  bp[0:MLKEM_N] = __polyvec_pointwise_acc(aat[0:MLKEM_VECN], sp);
  bp[MLKEM_N:MLKEM_N]= __polyvec_pointwise_acc(aat[MLKEM_VECN:MLKEM_VECN], sp);
  bp[2*MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(aat[2*MLKEM_VECN:MLKEM_VECN], sp);

  v = __polyvec_pointwise_acc(pkpv, sp);

  bp = __polyvec_invntt(bp);
  v = _poly_invntt(v);

  bp = __polyvec_add2(bp, ep);
  v = _poly_add2(v, epp);
  v = _poly_add2(v, k);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  () = #unspill(ct);

  ct[0:MLKEM_POLYVECCOMPRESSEDBYTES] = __i_polyvec_compress(ct[0:MLKEM_POLYVECCOMPRESSEDBYTES], bp);

  ct[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_CT_LEN-MLKEM_POLYVECCOMPRESSEDBYTES], v = _i_poly_compress(ct[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_CT_LEN-MLKEM_POLYVECCOMPRESSEDBYTES], v);

  return ct;

}

//inline
//fn __iindcpa_enc(reg ptr u8[MLKEM_CT_LEN] ctp, reg ptr u8[32] msgp, reg u64 pkp, reg ptr u8[MLKEM_SYMBYTES] noiseseed) -> reg ptr u8[MLKEM_CT_LEN]
//{
//  stack u16[MLKEM_VECN] pkpv sp ep bp;
//  stack u16[MLKEM_K*MLKEM_VECN] aat;
//  stack u16[MLKEM_N] k epp v;
//  stack u8[MLKEM_SYMBYTES] publicseed;
//  reg u64 i t64;
//  reg u8 nonce;
//  stack ptr u8[MLKEM_CT_LEN] sctp;
//  stack ptr u8[MLKEM_SYMBYTES] s_noiseseed;
//
//  s_noiseseed = noiseseed;
//  sctp = ctp;
//
//  pkpv = __polyvec_frombytes(pkp);
//
//  i = 0;
//  pkp += MLKEM_POLYVECBYTES;
//  while (i < MLKEM_SYMBYTES/8)
//  {
//    #[declassify]
//    t64 = (u64)[pkp];
//    publicseed.[u64 8*(int)i] = t64;
//    pkp += 8;
//    i += 1;
//  }
//
//  k = _i_poly_frommsg(k, msgp);
//
//  aat = __gen_matrix(publicseed, 1);
//
//  nonce = 0;
//  sp[0:MLKEM_N] = _poly_getnoise(sp[0:MLKEM_N], s_noiseseed, nonce);
//
//  nonce = 1;
//  sp[MLKEM_N:MLKEM_N] = _poly_getnoise(sp[MLKEM_N:MLKEM_N], s_noiseseed, nonce);
//
//  nonce = 2;
//  sp[2*MLKEM_N:MLKEM_N] = _poly_getnoise(sp[2*MLKEM_N:MLKEM_N], s_noiseseed, nonce);
//
//  nonce = 3;
//  ep[0:MLKEM_N] = _poly_getnoise(ep[0:MLKEM_N], s_noiseseed, nonce);
//
//  nonce = 4;
//  ep[MLKEM_N:MLKEM_N] = _poly_getnoise(ep[MLKEM_N:MLKEM_N], s_noiseseed, nonce);
//
//  nonce = 5;
//  ep[2*MLKEM_N:MLKEM_N] = _poly_getnoise(ep[2*MLKEM_N:MLKEM_N], s_noiseseed, nonce);
//
//  nonce = 6;
//  epp = _poly_getnoise(epp, s_noiseseed, nonce);
//
//  sp = __polyvec_ntt(sp);
//
//  bp[0:MLKEM_N] = __polyvec_pointwise_acc(aat[0:MLKEM_VECN], sp);
//  bp[MLKEM_N:MLKEM_N]= __polyvec_pointwise_acc(aat[MLKEM_VECN:MLKEM_VECN], sp);
//  bp[2*MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(aat[2*MLKEM_VECN:MLKEM_VECN], sp);
//
//  v = __polyvec_pointwise_acc(pkpv, sp);
//
//  bp = __polyvec_invntt(bp);
//  v = _poly_invntt(v);
//
//  bp = __polyvec_add2(bp, ep);
//  v = _poly_add2(v, epp);
//  v = _poly_add2(v, k);
//  bp = __polyvec_reduce(bp);
//  v  = __poly_reduce(v);
//
//  ctp = sctp;
//  ctp[0:MLKEM_POLYVECCOMPRESSEDBYTES] = __i_polyvec_compress(ctp[0:MLKEM_POLYVECCOMPRESSEDBYTES], bp);
//  ctp[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES], v = _i_poly_compress(ctp[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES], v);
//
//  return ctp;
//}
//
//
//inline
//fn __indcpa_dec(reg ptr u8[MLKEM_MSGBYTES] msgp, reg u64 ctp, reg u64 skp) -> reg ptr u8[MLKEM_N/8]
//{
//  stack u16[MLKEM_N] t v mp;
//  stack u16[MLKEM_VECN] bp skpv;
//
//  bp = __polyvec_decompress(ctp);
//  ctp += MLKEM_POLYVECCOMPRESSEDBYTES;
//  v = _poly_decompress(v, ctp);
//
//  skpv = __polyvec_frombytes(skp);
//
//  bp = __polyvec_ntt(bp);
//  t = __polyvec_pointwise_acc(skpv, bp);
//  t = _poly_invntt(t );
//
//  mp = _poly_sub(mp, v, t);
//  mp = __poly_reduce(mp);
//
//  msgp, mp = _i_poly_tomsg(msgp, mp);
//
//  return msgp;
//}
//
