require "params.jinc"
require "poly.jinc"
require "polyvec.jinc"
require "gen_matrix.jinc"

inline
fn __indcpa_keypair( // TEST
    reg ptr u8[MLKEM_PUBLICKEYBYTES] pk,
    reg ptr u8[MLKEM_SECRETKEYBYTES] sk,
    reg ptr u8[MLKEM_SYMBYTES] randomnessp)
    -> reg ptr u8[MLKEM_PUBLICKEYBYTES], reg ptr u8[MLKEM_SECRETKEYBYTES]
{
  stack u8[MLKEM_PUBLICKEYBYTES] pk2;
  stack u16[MLKEM_K * MLKEM_VECN] a;
  stack u16[MLKEM_VECN] e pkpv skpv;
  stack u8[64] buf;
  stack u8[MLKEM_SYMBYTES] publicseed noiseseed;
  stack u8[32] inbuf;
  reg u8 nonce;
  reg u64 t64;
  inline int i;

  () = #spill(pk, sk);

  for i = 0 to MLKEM_SYMBYTES/8 {
      t64 = randomnessp[u64 i];
      inbuf[u64 i] = t64;
  }
  () = #spill(t64);

  buf = _sha3_512_32(buf, inbuf);

  () = #unspill(t64);

  for i = 0 to MLKEM_SYMBYTES/8 {
      t64 = buf[u64 i];
      publicseed[u64 i] = t64;
      t64 = buf.[u64 (i + MLKEM_SYMBYTES/8)*8];
      noiseseed[u64 i] = t64;
  }

  () = #spill(t64);

  a = __gen_matrix(publicseed, 0);

  nonce = 0;
  skpv[0:MLKEM_N] = _poly_getnoise(skpv[0:MLKEM_N], noiseseed, nonce);
  nonce = 1;
  skpv[MLKEM_N:MLKEM_N] = _poly_getnoise(skpv[MLKEM_N:MLKEM_N], noiseseed, nonce);
  nonce = 2;
  skpv[2*MLKEM_N:MLKEM_N] = _poly_getnoise(skpv[2*MLKEM_N:MLKEM_N], noiseseed, nonce);

  nonce = 3;
  e[0:MLKEM_N] = _poly_getnoise(e[0:MLKEM_N], noiseseed, nonce);
  nonce = 4;
  e[MLKEM_N:MLKEM_N] = _poly_getnoise(e[MLKEM_N:MLKEM_N], noiseseed, nonce);
  nonce = 5;
  e[2*MLKEM_N:MLKEM_N] = _poly_getnoise(e[2*MLKEM_N:MLKEM_N], noiseseed, nonce);

  skpv = __polyvec_ntt(skpv);
  e    = __polyvec_ntt(e);

  pkpv[0:MLKEM_N] = __polyvec_pointwise_acc(a[0:MLKEM_VECN], skpv);
  pkpv[0:MLKEM_N] = _poly_frommont(pkpv[0:MLKEM_N]);
  pkpv[MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(a[MLKEM_VECN:MLKEM_VECN], skpv);
  pkpv[MLKEM_N:MLKEM_N] = _poly_frommont(pkpv[MLKEM_N:MLKEM_N]);
  pkpv[2*MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(a[2*MLKEM_VECN:MLKEM_VECN], skpv);
  pkpv[2*MLKEM_N:MLKEM_N] = _poly_frommont(pkpv[2*MLKEM_N:MLKEM_N]);

  pkpv = __polyvec_add2(pkpv, e);
  pkpv = __polyvec_reduce(pkpv);

  () = #unspill(pk, sk);

  pk[0:MLKEM_POLYVECBYTES] = __i_polyvec_tobytes(pk[0:MLKEM_POLYVECBYTES], pkpv);
  sk[0:MLKEM_POLYVECBYTES] = __i_polyvec_tobytes(sk[0:MLKEM_POLYVECBYTES], skpv);

  () = #unspill(t64);
  for i = 0 to MLKEM_POLYVECBYTES/8 {
      t64 = pk[u64 i];
      pk2[u64 i] = t64;
  }

  for i = 0 to MLKEM_SYMBYTES/8 {
      t64 = publicseed[u64 i];
      pk2.[u64 (i + MLKEM_POLYVECBYTES/8)*8] = t64;
  }

  for i = 0 to MLKEM_PUBLICKEYBYTES/8 {
      t64 = pk2[u64 i];
      pk[u64 i] = t64;
  }

  () = #spill(t64);

  return pk, sk;
}

inline
fn __indcpa_enc(
    reg ptr u8[MLKEM_CT_LEN] ct,
    reg ptr u8[MLKEM_MSGBYTES] msgp,
    reg ptr u8[MLKEM_PUBLICKEYBYTES] pk,
    reg ptr u8[MLKEM_SYMBYTES] noiseseed)
    -> reg ptr u8[MLKEM_CT_LEN]
{ // TEST
  stack u16[MLKEM_VECN] pkpv sp ep bp;
  stack u16[MLKEM_K*MLKEM_VECN] aat;
  stack u16[MLKEM_N] k epp v;
  stack u8[MLKEM_SYMBYTES] publicseed;
  reg u8 nonce;
  reg u64 t;
  stack u8[MLKEM_SYMBYTES] s_noiseseed;
  inline int i;
  s_noiseseed = noiseseed;

  () = #spill(pk, ct);

  pkpv = __i_polyvec_frombytes(pk[0:MLKEM_POLYVECBYTES]);

  for i = 0 to MLKEM_SYMBYTES/8 {
      t = pk.[u64 (MLKEM_POLYVECBYTES + i)*8];
      publicseed[u64 i] = t;
  }

  () = #spill(t);

  k = _i_poly_frommsg(k, msgp);

  aat = __gen_matrix(publicseed, 1);

  nonce = 0;
  sp[0:MLKEM_N] = _poly_getnoise(sp[0:MLKEM_N], s_noiseseed, nonce);

  nonce = 1;
  sp[MLKEM_N:MLKEM_N] = _poly_getnoise(sp[MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 2;
  sp[2*MLKEM_N:MLKEM_N] = _poly_getnoise(sp[2*MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 3;
  ep[0:MLKEM_N] = _poly_getnoise(ep[0:MLKEM_N], s_noiseseed, nonce);

  nonce = 4;
  ep[MLKEM_N:MLKEM_N] = _poly_getnoise(ep[MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 5;
  ep[2*MLKEM_N:MLKEM_N] = _poly_getnoise(ep[2*MLKEM_N:MLKEM_N], s_noiseseed, nonce);

  nonce = 6;
  epp = _poly_getnoise(epp, s_noiseseed, nonce);
  sp = __polyvec_ntt(sp);

  bp[0:MLKEM_N] = __polyvec_pointwise_acc(aat[0:MLKEM_VECN], sp);
  bp[MLKEM_N:MLKEM_N]= __polyvec_pointwise_acc(aat[MLKEM_VECN:MLKEM_VECN], sp);
  bp[2*MLKEM_N:MLKEM_N] = __polyvec_pointwise_acc(aat[2*MLKEM_VECN:MLKEM_VECN], sp);

  v = __polyvec_pointwise_acc(pkpv, sp);

  bp = __polyvec_invntt(bp);
  v = _poly_invntt(v);

  bp = __polyvec_add2(bp, ep);
  v = _poly_add2(v, epp);
  v = _poly_add2(v, k);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  () = #unspill(ct);

  ct[0:MLKEM_POLYVECCOMPRESSEDBYTES] = __i_polyvec_compress(ct[0:MLKEM_POLYVECCOMPRESSEDBYTES], bp);

  ct[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES], v = _i_poly_compress(ct[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES], v);

  return ct;

}

inline
fn __indcpa_dec(
    reg ptr u8[MLKEM_MSGBYTES] msgp,
    reg ptr u8[MLKEM_CT_LEN] ct,
    reg ptr u8[MLKEM_SECRETKEYBYTES] sk)
    -> reg ptr u8[MLKEM_N/8]
{ // TEST

  stack u16[MLKEM_N] t v mp;
  stack u16[MLKEM_VECN] bp skpv;

  () = #spill(ct, msgp, sk);

  bp = __i_polyvec_decompress(ct[0:MLKEM_POLYVECCOMPRESSEDBYTES]);
  v = _i_poly_decompress(v, ct[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES]);

  skpv = __i_polyvec_frombytes(sk[0:MLKEM_POLYVECBYTES]);

  bp = __polyvec_ntt(bp);
  t = __polyvec_pointwise_acc(skpv, bp);
  t = _poly_invntt(t);

  mp = _poly_sub(mp, v, t);
  mp = __poly_reduce(mp);

  () = #unspill(msgp);

  msgp, mp = _i_poly_tomsg(msgp, mp);

  return msgp;
}
