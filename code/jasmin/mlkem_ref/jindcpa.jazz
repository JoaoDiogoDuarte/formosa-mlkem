require "params.jinc"
require "poly.jinc"
require "polyvec.jinc"
require "gen_matrix.jinc"


export fn indcpa_keypair_jazz(reg u64 pkp, reg u64 skp, reg u64 randomnessp)
{
  reg u64 t;
  inline int i;

  stack u8[MLKEM_SYMBYTES] randomness;
  stack u8[MLKEM_PUBLICKEYBYTES] pk;
  stack u8[MLKEM_SECRETKEYBYTES] sk;

  reg ptr u8[MLKEM_SYMBYTES*2] randomnessp1;

  _ = #init_msf();

  for i = 0 to (MLKEM_SYMBYTES)/8 { randomness[u64 i] = [randomnessp + 8*i]; }

  randomnessp1 = randomnessp;
  pkp = pkp;
  sk = sk;

  () = #spill(pkp, skp, randomnessp, randomnessp1);

  pk, sk = __indcpa_keypair(pk, sk, randomnessp1);

  () = #unspill(pkp, skp);

  for i=0 to MLKEM_PUBLICKEYBYTES/8 { t = pk[u64 i]; [pkp + 8*i] = t; }
  for i=0 to MLKEM_SECRETKEYBYTES/8 { t = sk[u64 i]; [skp + 8*i] = t; }
}


export fn indcpa_enc_jazz(reg u64 ctp, reg u64 msgp, reg u64 pkp, reg u64 coinsp)
{
  reg u64 t;
  inline int i;

  stack u8[MLKEM_SYMBYTES] randomness;
  stack u8[MLKEM_CT_LEN] ct;
  stack u8[MLKEM_SYMBYTES] msg;
  stack u8[MLKEM_PUBLICKEYBYTES] pk;

  reg ptr u8[MLKEM_SYMBYTES] randomnessp;
  reg ptr u8[MLKEM_PUBLICKEYBYTES] pkps;

  _ = #init_msf();

  for i = 0 to MLKEM_SYMBYTES { randomness[i] = (u8)[coinsp + i]; }
  for i = 0 to MLKEM_PUBLICKEYBYTES { pk[i] = (u8)[pkp + i]; }

  ctp = ctp;
  msgp = msgp;

  () = #spill(ctp, msgp, pkps, coinsp);

  randomnessp = randomness;
  pkps = pk;

  ct, msg = __indcpa_enc(ct, shk, pkps, randomnessp);

  () = #spill(pkp, randomnessp);
  () = #unspill(ctp, msgp);

  for i=0 to MLKEM_SYMBYTES/8 { t = msg[u64 i]; [msgp + 8*i] = t; }
  for i=0 to MLKEM_CT_LEN/8 { t = ct[u64 i]; [ctp + 8*i] = t; }

}



export fn indcpa_dec_jazz(reg u64 msgp, reg u64 ctp, reg u64 skp)
{
  inline int i;
  reg u64 t;
  stack u8[MLKEM_CT_LEN] ct;
  stack u8[MLKEM_SYMBYTES] msg;
  stack u8[MLKEM_SECRETKEYBYTES] sk;

  reg ptr u8[MLKEM_SECRETKEYBYTES] skps;
  reg ptr u8[MLKEM_CT_LEN] ctps;

  _ = #init_msf();

  for i = 0 to MLKEM_SECRETKEYBYTES/8 { sk[u64 i] = [skp + 8*i]; }
  for i = 0 to MLKEM_CT_LEN/8 { ct[u64 i] = [ctp + 8*i]; }

  msgp = msgp;
  ctps = ct;
  skps = sk;

  () = #spill(ctp, ctps, skp, skps, msgp);

  msg = __indcpa_dec(msg, ct, sk);

  () = #unspill(msgp);

  for i=0 to MLKEM_SYMBYTES/8 { t = msg[u64 i]; [msgp + 8*i] = t; }

}
