#include "params.jahh"
#include "poly_compress.jahh"
#include "poly_decompress.jahh"
#include "poly_tobytes.jahh"
#include "poly_frombytes.jahh"
#include "poly_tomsg.jahh"
#include "poly_frommsg.jahh"
#include "poly_add.jahh"
#include "poly_sub.jahh"
#include "poly_ntt.jahh"
#include "poly_invntt.jahh"
#include "poly_basemul.jahh"
#include "poly_frommont.jahh"
#include "poly_reduce.jahh"
#include "poly_csubq.jahh"
#include "poly_getnoise.jahh"
#include "polyvec_decompress.jahh"
#include "polyvec_tobytes.jahh"
#include "polyvec_frombytes.jahh"
#include "polyvec_add.jahh"
#include "polyvec_pointwise_acc.jahh"
#include "polyvec_ntt.jahh"
#include "polyvec_invntt.jahh"
#include "polyvec_csubq.jahh"
#include "polyvec_reduce.jahh"
#include "gen_matrix.jahh"


export fn indcpa_dec_jazz(reg u64 msgp, reg u64 ctp, reg u64 skp, reg u64 zetasp, reg u64 zetasinvp)
{
  stack u16[KYBER_N] v mp;
  stack u16[KYBER_VECN] bp skpv;

  bp = polyvec_decompress(ctp);
  ctp += KYBER_POLYVECCOMPRESSEDBYTES;
  v = poly_decompress(ctp);

  skpv = polyvec_frombytes(skp);
  
  bp = polyvec_ntt(bp, zetasp);
  mp = polyvec_pointwise_acc(skpv, bp, zetasp);
  mp = poly_invntt(mp, zetasinvp);

  mp = poly_sub(v, mp);
  mp = poly_reduce(mp);
  
//  poly_tobytes(msgp, mp);
  poly_tomsg(msgp, mp);

}
